{"ast":null,"code":"import _assign from './_assign';\nimport _identity from './_identity';\nimport _isArrayLike from './_isArrayLike';\nimport _isTransformer from './_isTransformer';\nimport objOf from '../objOf';\nvar _stepCatArray = {\n  '@@transducer/init': Array,\n  '@@transducer/step': function (xs, x) {\n    xs.push(x);\n    return xs;\n  },\n  '@@transducer/result': _identity\n};\nvar _stepCatString = {\n  '@@transducer/init': String,\n  '@@transducer/step': function (a, b) {\n    return a + b;\n  },\n  '@@transducer/result': _identity\n};\nvar _stepCatObject = {\n  '@@transducer/init': Object,\n  '@@transducer/step': function (result, input) {\n    return _assign(result, _isArrayLike(input) ? objOf(input[0], input[1]) : input);\n  },\n  '@@transducer/result': _identity\n};\nexport default function _stepCat(obj) {\n  if (_isTransformer(obj)) {\n    return obj;\n  }\n\n  if (_isArrayLike(obj)) {\n    return _stepCatArray;\n  }\n\n  if (typeof obj === 'string') {\n    return _stepCatString;\n  }\n\n  if (typeof obj === 'object') {\n    return _stepCatObject;\n  }\n\n  throw new Error('Cannot create transformer for ' + obj);\n}","map":{"version":3,"sources":["C:/we-transfer-clone/app/node_modules/ramda/es/internal/_stepCat.js"],"names":["_assign","_identity","_isArrayLike","_isTransformer","objOf","_stepCatArray","Array","xs","x","push","_stepCatString","String","a","b","_stepCatObject","Object","result","input","_stepCat","obj","Error"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,WAApB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,KAAP,MAAkB,UAAlB;AAEA,IAAIC,aAAa,GAAG;AAClB,uBAAqBC,KADH;AAElB,uBAAqB,UAAUC,EAAV,EAAcC,CAAd,EAAiB;AACpCD,IAAAA,EAAE,CAACE,IAAH,CAAQD,CAAR;AACA,WAAOD,EAAP;AACD,GALiB;AAMlB,yBAAuBN;AANL,CAApB;AAQA,IAAIS,cAAc,GAAG;AACnB,uBAAqBC,MADF;AAEnB,uBAAqB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACnC,WAAOD,CAAC,GAAGC,CAAX;AACD,GAJkB;AAKnB,yBAAuBZ;AALJ,CAArB;AAOA,IAAIa,cAAc,GAAG;AACnB,uBAAqBC,MADF;AAEnB,uBAAqB,UAAUC,MAAV,EAAkBC,KAAlB,EAAyB;AAC5C,WAAOjB,OAAO,CAACgB,MAAD,EAASd,YAAY,CAACe,KAAD,CAAZ,GAAsBb,KAAK,CAACa,KAAK,CAAC,CAAD,CAAN,EAAWA,KAAK,CAAC,CAAD,CAAhB,CAA3B,GAAkDA,KAA3D,CAAd;AACD,GAJkB;AAKnB,yBAAuBhB;AALJ,CAArB;AAQA,eAAe,SAASiB,QAAT,CAAkBC,GAAlB,EAAuB;AACpC,MAAIhB,cAAc,CAACgB,GAAD,CAAlB,EAAyB;AACvB,WAAOA,GAAP;AACD;;AACD,MAAIjB,YAAY,CAACiB,GAAD,CAAhB,EAAuB;AACrB,WAAOd,aAAP;AACD;;AACD,MAAI,OAAOc,GAAP,KAAe,QAAnB,EAA6B;AAC3B,WAAOT,cAAP;AACD;;AACD,MAAI,OAAOS,GAAP,KAAe,QAAnB,EAA6B;AAC3B,WAAOL,cAAP;AACD;;AACD,QAAM,IAAIM,KAAJ,CAAU,mCAAmCD,GAA7C,CAAN;AACD","sourcesContent":["import _assign from './_assign';\nimport _identity from './_identity';\nimport _isArrayLike from './_isArrayLike';\nimport _isTransformer from './_isTransformer';\nimport objOf from '../objOf';\n\nvar _stepCatArray = {\n  '@@transducer/init': Array,\n  '@@transducer/step': function (xs, x) {\n    xs.push(x);\n    return xs;\n  },\n  '@@transducer/result': _identity\n};\nvar _stepCatString = {\n  '@@transducer/init': String,\n  '@@transducer/step': function (a, b) {\n    return a + b;\n  },\n  '@@transducer/result': _identity\n};\nvar _stepCatObject = {\n  '@@transducer/init': Object,\n  '@@transducer/step': function (result, input) {\n    return _assign(result, _isArrayLike(input) ? objOf(input[0], input[1]) : input);\n  },\n  '@@transducer/result': _identity\n};\n\nexport default function _stepCat(obj) {\n  if (_isTransformer(obj)) {\n    return obj;\n  }\n  if (_isArrayLike(obj)) {\n    return _stepCatArray;\n  }\n  if (typeof obj === 'string') {\n    return _stepCatString;\n  }\n  if (typeof obj === 'object') {\n    return _stepCatObject;\n  }\n  throw new Error('Cannot create transformer for ' + obj);\n}"]},"metadata":{},"sourceType":"module"}