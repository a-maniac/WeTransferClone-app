{"ast":null,"code":"var _jsxFileName = \"C:\\\\we-transfer-clone\\\\app\\\\src\\\\upload\\\\Upload.js\";\nimport React, { Component } from 'react';\nimport Dropzone from '../dropzone/Dropzone';\nimport checkCircle from \"../checkCircle.svg\";\nimport Progress from '../progress/Progress';\nimport Form from 'react-bootstrap/Form';\nimport FormScroll from './FormScroll';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlusCircle, faChevronCircleDown, faChevronCircleUp } from '@fortawesome/free-solid-svg-icons';\nimport './Upload.css';\nexport default class Upload extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      files: [],\n      uploading: false,\n      uploadProgress: {},\n      successfullUploaded: false\n    };\n    this.onFilesAdded = this.onFilesAdded.bind(this);\n    this.uploadFiles = this.uploadFiles.bind(this);\n    this.sendRequest = this.sendRequest.bind(this);\n    this.renderActions = this.renderActions.bind(this);\n  }\n\n  onFilesAdded(files) {\n    this.setState(prevState => ({\n      files: prevState.files.concat(files)\n    }));\n  }\n\n  renderProgress(file) {\n    const uploadProgress = this.state.uploadProgress[file.name];\n\n    if (this.state.uploading || this.state.successfullUploaded) {\n      return React.createElement(\"div\", {\n        className: \"ProgressWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(Progress, {\n        progress: uploadProgress ? uploadProgress.percentage : 0,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }), React.createElement(\"img\", {\n        className: \"CheckIcon\",\n        alt: \"done\",\n        src: checkCircle,\n        style: {\n          opacity: uploadProgress && uploadProgress.state === \"done\" ? 0.5 : 0\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }));\n    }\n  }\n\n  renderActions() {\n    if (this.state.successfullUploaded) {\n      return React.createElement(\"button\", {\n        onClick: () => this.setState({\n          files: [],\n          successfullUploaded: false\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, \"Clear\");\n    } else {\n      return React.createElement(\"button\", {\n        disabled: this.state.files.length < 0 || this.state.uploading,\n        onClick: this.uploadFiles,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \"Upload\");\n    }\n  }\n\n  async uploadFiles() {\n    this.setState({\n      uploadProgress: {},\n      uploading: true\n    });\n    const promises = [];\n    this.state.files.forEach(file => {\n      promises.push(this.sendRequest(file));\n    });\n\n    try {\n      await Promise.all(promises);\n      this.setState({\n        successfullUploaded: true,\n        uploading: false\n      });\n    } catch (e) {\n      this.setState({\n        successfullUploaded: true,\n        uploading: false\n      });\n    }\n  }\n\n  sendRequest(file) {\n    return new Promise((resolve, reject) => {\n      const req = new XMLHttpRequest();\n      req.upload.addEventListener(\"progress\", event => {\n        if (event.lengthComputable) {\n          const copy = { ...this.state.uploadProgress\n          };\n          copy[file.name] = {\n            state: \"pending\",\n            percentage: event.loaded / event.total * 100\n          };\n          this.setState({\n            uploadProgress: copy\n          });\n        }\n      });\n      req.upload.addEventListener(\"load\", event => {\n        const copy = { ...this.state.uploadProgress\n        };\n        copy[file.name] = {\n          state: \"done\",\n          percentage: 100\n        };\n        this.setState({\n          uploadProgress: copy\n        });\n        resolve(req.response);\n      });\n      req.upload.addEventListener(\"error\", event => {\n        const copy = { ...this.state.uploadProgress\n        };\n        copy[file.name] = {\n          state: \"error\",\n          percentage: 0\n        };\n        this.setState({\n          uploadProgress: copy\n        });\n        reject(req.response);\n      });\n      const formData = new FormData();\n      formData.append(\"file\", file, file.name);\n      req.open(\"POST\", \"http://localhost:8000/upload\");\n      req.send(formData);\n    });\n  }\n\n  render() {\n    const {\n      mailTo,\n      mailFrom,\n      message,\n      formScroll\n    } = this.state;\n    let buttonDown = React.createElement(Button, {\n      onClick: this.scrollDown,\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(FontAwesomeIcon, {\n      className: \"scrollIcon d-flex\",\n      icon: faChevronCircleDown,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }));\n    let buttonUp = React.createElement(Button, {\n      onClick: this.scrollUp,\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(FontAwesomeIcon, {\n      className: \"scrollIcon d-flex\",\n      icon: faChevronCircleUp,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }));\n    return React.createElement(\"div\", {\n      className: \"Upload col-12 d-flex\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"Title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, \"Upload Files\"), React.createElement(\"div\", {\n      className: \"Content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(Dropzone, {\n      onFilesAdded: this.onFilesAdded,\n      disabled: this.state.uploading || this.state.successfullUploaded,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"Files\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, this.state.files.map(file => {\n      return React.createElement(\"div\", {\n        key: file.name,\n        className: \"Row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"Filename\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, file.name), this.renderProgress(file));\n    })), React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row d-flex justify-content-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(Form.Group, {\n      className: \"col-10 mx-auto\",\n      controlId: \"formBasicSend\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(Form.Control, {\n      type: \"email\",\n      placeholder: \"Send to\",\n      value: mailTo,\n      onChange: this.handleMailToChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"row d-flex justify-content-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(Form.Group, {\n      className: \"col-10 mx-auto\",\n      controlId: \"formBasicEmail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(Form.Control, {\n      type: \"email\",\n      placeholder: \"Your Email address\",\n      value: mailFrom,\n      onChange: this.handleMailFromChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"row d-flex justify-content-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(Form.Group, {\n      className: \"col-10 mx-auto\",\n      controlId: \"exampleForm.ControlTextarea1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(Form.Control, {\n      as: \"textarea\",\n      rows: \"3\",\n      placeholder: \"Message...\",\n      value: message,\n      onChange: this.handleMessageChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"row justify-content-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, formScroll ? React.createElement(FormScroll, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }) : buttonDown), React.createElement(\"div\", {\n      className: \"row justify-content-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, formScroll && buttonUp, \"    \"), React.createElement(\"div\", {\n      className: \"row d-flex justify-content-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      type: \"submit\",\n      className: \"col-8 mb-3 col-sm-8 col-md-8 col-lg-6 justify-content-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, \"Submit\")))));\n  }\n\n}","map":{"version":3,"sources":["C:/we-transfer-clone/app/src/upload/Upload.js"],"names":["React","Component","Dropzone","Progress","Form","FormScroll","styled","FontAwesomeIcon","faPlusCircle","faChevronCircleDown","faChevronCircleUp","Upload","constructor","props","state","files","uploading","uploadProgress","successfullUploaded","onFilesAdded","bind","uploadFiles","sendRequest","renderActions","setState","prevState","concat","renderProgress","file","name","percentage","checkCircle","opacity","length","promises","forEach","push","Promise","all","e","resolve","reject","req","XMLHttpRequest","upload","addEventListener","event","lengthComputable","copy","loaded","total","response","formData","FormData","append","open","send","render","mailTo","mailFrom","message","formScroll","buttonDown","scrollDown","buttonUp","scrollUp","map","handleMailToChange","handleMailFromChange","handleMessageChange"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,sBAArB;;AAEA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAAQC,eAAR,QAA8B,gCAA9B;AACA,SAAQC,YAAR,EAAsBC,mBAAtB,EAA2CC,iBAA3C,QAAmE,mCAAnE;AAEA,OAAO,cAAP;AAEA,eAAe,MAAMC,MAAN,SAAqBV,SAArB,CAA+B;AAE1CW,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE,EADE;AAETC,MAAAA,SAAS,EAAE,KAFF;AAGTC,MAAAA,cAAc,EAAE,EAHP;AAITC,MAAAA,mBAAmB,EAAE;AAJZ,KAAb;AAOE,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKE,WAAL,GAAmB,KAAKA,WAAL,CAAiBF,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKG,aAAL,GAAqB,KAAKA,aAAL,CAAmBH,IAAnB,CAAwB,IAAxB,CAArB;AACL;;AAEDD,EAAAA,YAAY,CAACJ,KAAD,EAAQ;AAChB,SAAKS,QAAL,CAAcC,SAAS,KAAK;AAC1BV,MAAAA,KAAK,EAAEU,SAAS,CAACV,KAAV,CAAgBW,MAAhB,CAAuBX,KAAvB;AADmB,KAAL,CAAvB;AAGD;;AAEDY,EAAAA,cAAc,CAACC,IAAD,EAAO;AACnB,UAAMX,cAAc,GAAG,KAAKH,KAAL,CAAWG,cAAX,CAA0BW,IAAI,CAACC,IAA/B,CAAvB;;AACA,QAAI,KAAKf,KAAL,CAAWE,SAAX,IAAwB,KAAKF,KAAL,CAAWI,mBAAvC,EAA4D;AAC1D,aACE;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD;AAAU,QAAA,QAAQ,EAAED,cAAc,GAAGA,cAAc,CAACa,UAAlB,GAA+B,CAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AACE,QAAA,SAAS,EAAC,WADZ;AAEE,QAAA,GAAG,EAAC,MAFN;AAGE,QAAA,GAAG,EAAEC,WAHP;AAIE,QAAA,KAAK,EAAE;AACLC,UAAAA,OAAO,EACLf,cAAc,IAAIA,cAAc,CAACH,KAAf,KAAyB,MAA3C,GAAoD,GAApD,GAA0D;AAFvD,SAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF;AAcD;AACF;;AAEDS,EAAAA,aAAa,GAAG;AACd,QAAI,KAAKT,KAAL,CAAWI,mBAAf,EAAoC;AAClC,aACE;AACE,QAAA,OAAO,EAAE,MACP,KAAKM,QAAL,CAAc;AAAET,UAAAA,KAAK,EAAE,EAAT;AAAaG,UAAAA,mBAAmB,EAAE;AAAlC,SAAd,CAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF;AASD,KAVD,MAUO;AACL,aACE;AACE,QAAA,QAAQ,EAAE,KAAKJ,KAAL,CAAWC,KAAX,CAAiBkB,MAAjB,GAA0B,CAA1B,IAA+B,KAAKnB,KAAL,CAAWE,SADtD;AAEE,QAAA,OAAO,EAAE,KAAKK,WAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF;AAQD;AACF;;AAED,QAAMA,WAAN,GAAoB;AAClB,SAAKG,QAAL,CAAc;AAAEP,MAAAA,cAAc,EAAE,EAAlB;AAAsBD,MAAAA,SAAS,EAAE;AAAjC,KAAd;AACA,UAAMkB,QAAQ,GAAG,EAAjB;AACA,SAAKpB,KAAL,CAAWC,KAAX,CAAiBoB,OAAjB,CAAyBP,IAAI,IAAI;AAC/BM,MAAAA,QAAQ,CAACE,IAAT,CAAc,KAAKd,WAAL,CAAiBM,IAAjB,CAAd;AACD,KAFD;;AAGA,QAAI;AACF,YAAMS,OAAO,CAACC,GAAR,CAAYJ,QAAZ,CAAN;AAEA,WAAKV,QAAL,CAAc;AAAEN,QAAAA,mBAAmB,EAAE,IAAvB;AAA6BF,QAAAA,SAAS,EAAE;AAAxC,OAAd;AACD,KAJD,CAIE,OAAOuB,CAAP,EAAU;AACV,WAAKf,QAAL,CAAc;AAAEN,QAAAA,mBAAmB,EAAE,IAAvB;AAA6BF,QAAAA,SAAS,EAAE;AAAxC,OAAd;AACD;AACF;;AAEDM,EAAAA,WAAW,CAACM,IAAD,EAAO;AAChB,WAAO,IAAIS,OAAJ,CAAY,CAACG,OAAD,EAAUC,MAAV,KAAqB;AACtC,YAAMC,GAAG,GAAG,IAAIC,cAAJ,EAAZ;AAEAD,MAAAA,GAAG,CAACE,MAAJ,CAAWC,gBAAX,CAA4B,UAA5B,EAAwCC,KAAK,IAAI;AAC/C,YAAIA,KAAK,CAACC,gBAAV,EAA4B;AAC3B,gBAAMC,IAAI,GAAG,EAAE,GAAG,KAAKlC,KAAL,CAAWG;AAAhB,WAAb;AACA+B,UAAAA,IAAI,CAACpB,IAAI,CAACC,IAAN,CAAJ,GAAkB;AACjBf,YAAAA,KAAK,EAAE,SADU;AAEjBgB,YAAAA,UAAU,EAAGgB,KAAK,CAACG,MAAN,GAAeH,KAAK,CAACI,KAAtB,GAA+B;AAF1B,WAAlB;AAIA,eAAK1B,QAAL,CAAc;AAAEP,YAAAA,cAAc,EAAE+B;AAAlB,WAAd;AACA;AACD,OATF;AAWCN,MAAAA,GAAG,CAACE,MAAJ,CAAWC,gBAAX,CAA4B,MAA5B,EAAoCC,KAAK,IAAI;AAC5C,cAAME,IAAI,GAAG,EAAE,GAAG,KAAKlC,KAAL,CAAWG;AAAhB,SAAb;AACA+B,QAAAA,IAAI,CAACpB,IAAI,CAACC,IAAN,CAAJ,GAAkB;AAAEf,UAAAA,KAAK,EAAE,MAAT;AAAiBgB,UAAAA,UAAU,EAAE;AAA7B,SAAlB;AACA,aAAKN,QAAL,CAAc;AAAEP,UAAAA,cAAc,EAAE+B;AAAlB,SAAd;AACAR,QAAAA,OAAO,CAACE,GAAG,CAACS,QAAL,CAAP;AACA,OALD;AAOAT,MAAAA,GAAG,CAACE,MAAJ,CAAWC,gBAAX,CAA4B,OAA5B,EAAqCC,KAAK,IAAI;AAC7C,cAAME,IAAI,GAAG,EAAE,GAAG,KAAKlC,KAAL,CAAWG;AAAhB,SAAb;AACA+B,QAAAA,IAAI,CAACpB,IAAI,CAACC,IAAN,CAAJ,GAAkB;AAAEf,UAAAA,KAAK,EAAE,OAAT;AAAkBgB,UAAAA,UAAU,EAAE;AAA9B,SAAlB;AACA,aAAKN,QAAL,CAAc;AAAEP,UAAAA,cAAc,EAAE+B;AAAlB,SAAd;AACAP,QAAAA,MAAM,CAACC,GAAG,CAACS,QAAL,CAAN;AACA,OALD;AAOD,YAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,MAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwB1B,IAAxB,EAA8BA,IAAI,CAACC,IAAnC;AAEAa,MAAAA,GAAG,CAACa,IAAJ,CAAS,MAAT,EAAiB,8BAAjB;AACAb,MAAAA,GAAG,CAACc,IAAJ,CAASJ,QAAT;AACD,KAjCM,CAAP;AAkCD;;AAGHK,EAAAA,MAAM,GAAG;AAEP,UAAM;AAACC,MAAAA,MAAD;AAASC,MAAAA,QAAT;AAAmBC,MAAAA,OAAnB;AAA4BC,MAAAA;AAA5B,QAA0C,KAAK/C,KAArD;AAEF,QAAIgD,UAAU,GACZ,oBAAC,MAAD;AAAS,MAAA,OAAO,EAAE,KAAKC,UAAvB;AAAmC,MAAA,IAAI,EAAC,QAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,eAAD;AAAiB,MAAA,SAAS,EAAC,mBAA3B;AACQ,MAAA,IAAI,EAAEtD,mBADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADF;AAQF,QAAIuD,QAAQ,GACR,oBAAC,MAAD;AAAS,MAAA,OAAO,EAAE,KAAKC,QAAvB;AAAiC,MAAA,IAAI,EAAC,QAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,eAAD;AAAiB,MAAA,SAAS,EAAC,mBAA3B;AACQ,MAAA,IAAI,EAAEvD,iBADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ;AAQM,WACQ;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAM,MAAA,SAAS,EAAC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,EAEI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACR,oBAAC,QAAD;AACE,MAAA,YAAY,EAAE,KAAKS,YADrB;AAEE,MAAA,QAAQ,EAAE,KAAKL,KAAL,CAAWE,SAAX,IAAwB,KAAKF,KAAL,CAAWI,mBAF/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADQ,CADA,EAOA;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKJ,KAAL,CAAWC,KAAX,CAAiBmD,GAAjB,CAAqBtC,IAAI,IAAI;AAC9B,aACI;AAAK,QAAA,GAAG,EAAEA,IAAI,CAACC,IAAf;AAAqB,QAAA,SAAS,EAAC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAM,QAAA,SAAS,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA4BD,IAAI,CAACC,IAAjC,CADA,EAEC,KAAKF,cAAL,CAAoBC,IAApB,CAFD,CADJ;AAMC,KAPA,CADL,CAPA,EAiBA,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACV;AAAK,MAAA,SAAS,EAAC,mCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD,CAAM,KAAN;AAAY,MAAA,SAAS,EAAC,gBAAtB;AAAuC,MAAA,SAAS,EAAC,eAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD,CAAM,OAAN;AAAc,MAAA,IAAI,EAAC,OAAnB;AAA2B,MAAA,WAAW,EAAC,SAAvC;AAAiD,MAAA,KAAK,EAAE8B,MAAxD;AAAgE,MAAA,QAAQ,EAAE,KAAKS,kBAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CADU,EAMV;AAAK,MAAA,SAAS,EAAC,mCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD,CAAM,KAAN;AAAY,MAAA,SAAS,EAAC,gBAAtB;AAAuC,MAAA,SAAS,EAAC,gBAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD,CAAM,OAAN;AAAc,MAAA,IAAI,EAAC,OAAnB;AAA2B,MAAA,WAAW,EAAC,oBAAvC;AAA4D,MAAA,KAAK,EAAER,QAAnE;AAA6E,MAAA,QAAQ,EAAE,KAAKS,oBAA5F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CANU,EAWV;AAAK,MAAA,SAAS,EAAC,mCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD,CAAM,KAAN;AAAY,MAAA,SAAS,EAAC,gBAAtB;AAAuC,MAAA,SAAS,EAAC,8BAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD,CAAM,OAAN;AAAc,MAAA,EAAE,EAAC,UAAjB;AAA4B,MAAA,IAAI,EAAC,GAAjC;AAAqC,MAAA,WAAW,EAAC,YAAjD;AAA8D,MAAA,KAAK,EAAER,OAArE;AAA8E,MAAA,QAAQ,EAAE,KAAKS,mBAA7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CAXU,EAmBV;AAAK,MAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACIR,UAAU,GAAG,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAH,GAAqBC,UADnC,CAnBU,EAsBV;AAAK,MAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACID,UAAU,IAAIG,QADlB,SAtBU,EAyBV;AAAK,MAAA,SAAS,EAAC,mCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,SAAhB;AAA0B,MAAA,IAAI,EAAC,QAA/B;AAAwC,MAAA,SAAS,EAAC,8DAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,CAzBU,CAjBA,CAFJ,CADR;AAuDH;;AAnMyC","sourcesContent":["import React, { Component } from 'react'\r\nimport Dropzone from '../dropzone/Dropzone';\r\nimport checkCircle from '../checkCircle.svg';\r\nimport Progress from '../progress/Progress';\r\nimport Form from 'react-bootstrap/Form';\r\nimport FormScroll from './FormScroll';\r\nimport styled from 'styled-components';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {faPlusCircle, faChevronCircleDown, faChevronCircleUp} from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport './Upload.css'\r\n\r\nexport default class Upload extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n            files: [],\r\n            uploading: false,\r\n            uploadProgress: {},\r\n            successfullUploaded: false\r\n          }\r\n\r\n          this.onFilesAdded = this.onFilesAdded.bind(this);\r\n          this.uploadFiles = this.uploadFiles.bind(this);\r\n          this.sendRequest = this.sendRequest.bind(this);\r\n          this.renderActions = this.renderActions.bind(this);\r\n    }\r\n\r\n    onFilesAdded(files) {\r\n        this.setState(prevState => ({\r\n          files: prevState.files.concat(files)\r\n        }));\r\n      }\r\n\r\n      renderProgress(file) {\r\n        const uploadProgress = this.state.uploadProgress[file.name];\r\n        if (this.state.uploading || this.state.successfullUploaded) {\r\n          return (\r\n            <div className=\"ProgressWrapper\">\r\n              <Progress progress={uploadProgress ? uploadProgress.percentage : 0} />\r\n              <img\r\n                className=\"CheckIcon\"\r\n                alt=\"done\"\r\n                src={checkCircle}\r\n                style={{\r\n                  opacity:\r\n                    uploadProgress && uploadProgress.state === \"done\" ? 0.5 : 0\r\n                }}\r\n              />\r\n            </div>\r\n          );\r\n        }\r\n      }\r\n\r\n      renderActions() {\r\n        if (this.state.successfullUploaded) {\r\n          return (\r\n            <button\r\n              onClick={() =>\r\n                this.setState({ files: [], successfullUploaded: false })\r\n              }\r\n            >\r\n              Clear\r\n            </button>\r\n          );\r\n        } else {\r\n          return (\r\n            <button\r\n              disabled={this.state.files.length < 0 || this.state.uploading}\r\n              onClick={this.uploadFiles}\r\n            >\r\n              Upload\r\n            </button>\r\n          );\r\n        }\r\n      }\r\n\r\n      async uploadFiles() {\r\n        this.setState({ uploadProgress: {}, uploading: true });\r\n        const promises = [];\r\n        this.state.files.forEach(file => {\r\n          promises.push(this.sendRequest(file));\r\n        });\r\n        try {\r\n          await Promise.all(promises);\r\n      \r\n          this.setState({ successfullUploaded: true, uploading: false });\r\n        } catch (e) {\r\n          this.setState({ successfullUploaded: true, uploading: false });\r\n        }\r\n      }\r\n\r\n      sendRequest(file) {\r\n        return new Promise((resolve, reject) => {\r\n          const req = new XMLHttpRequest();\r\n\r\n          req.upload.addEventListener(\"progress\", event => {\r\n            if (event.lengthComputable) {\r\n             const copy = { ...this.state.uploadProgress };\r\n             copy[file.name] = {\r\n              state: \"pending\",\r\n              percentage: (event.loaded / event.total) * 100\r\n             };\r\n             this.setState({ uploadProgress: copy });\r\n            }\r\n           });\r\n            \r\n           req.upload.addEventListener(\"load\", event => {\r\n            const copy = { ...this.state.uploadProgress };\r\n            copy[file.name] = { state: \"done\", percentage: 100 };\r\n            this.setState({ uploadProgress: copy });\r\n            resolve(req.response);\r\n           });\r\n            \r\n           req.upload.addEventListener(\"error\", event => {\r\n            const copy = { ...this.state.uploadProgress };\r\n            copy[file.name] = { state: \"error\", percentage: 0 };\r\n            this.setState({ uploadProgress: copy });\r\n            reject(req.response);\r\n           });\r\n      \r\n          const formData = new FormData();\r\n          formData.append(\"file\", file, file.name);\r\n      \r\n          req.open(\"POST\", \"http://localhost:8000/upload\");\r\n          req.send(formData);\r\n        });\r\n      }\r\n    \r\n\r\n    render() {\r\n\r\n      const {mailTo, mailFrom, message, formScroll} = this.state;\r\n\r\n    let buttonDown = (\r\n      <Button  onClick={this.scrollDown} type=\"submit\">\r\n          <FontAwesomeIcon className=\"scrollIcon d-flex\"\r\n                  icon={faChevronCircleDown}\r\n          />    \r\n      </Button>\r\n  )\r\n\r\n  let buttonUp = (\r\n      <Button  onClick={this.scrollUp} type=\"submit\">\r\n          <FontAwesomeIcon className=\"scrollIcon d-flex\"\r\n                  icon={faChevronCircleUp}\r\n          />\r\n      </Button>\r\n  )\r\n\r\n        return (\r\n                <div className=\"Upload col-12 d-flex\">\r\n                    <span className=\"Title\">Upload Files</span>\r\n                    <div className=\"Content\">\r\n                    <div>\r\n            <Dropzone\r\n              onFilesAdded={this.onFilesAdded}\r\n              disabled={this.state.uploading || this.state.successfullUploaded}\r\n            />\r\n            </div>\r\n                    <div className=\"Files\">\r\n                        {this.state.files.map(file => {\r\n                        return (\r\n                            <div key={file.name} className=\"Row\">\r\n                            <span className=\"Filename\">{file.name}</span>\r\n                            {this.renderProgress(file)}\r\n                            </div>\r\n                        );\r\n                        })}\r\n                    </div>\r\n                    <Form > \r\n          <div className=\"row d-flex justify-content-center\">\r\n            <Form.Group className=\"col-10 mx-auto\" controlId=\"formBasicSend\">\r\n              <Form.Control type=\"email\" placeholder=\"Send to\" value={mailTo} onChange={this.handleMailToChange} />\r\n            </Form.Group>\r\n          </div>\r\n          <div className=\"row d-flex justify-content-center\">\r\n            <Form.Group className=\"col-10 mx-auto\" controlId=\"formBasicEmail\">\r\n              <Form.Control type=\"email\" placeholder=\"Your Email address\" value={mailFrom} onChange={this.handleMailFromChange} />\r\n            </Form.Group>\r\n          </div>\r\n          <div className=\"row d-flex justify-content-center\">\r\n            <Form.Group className=\"col-10 mx-auto\" controlId=\"exampleForm.ControlTextarea1\">\r\n              <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"Message...\" value={message} onChange={this.handleMessageChange}/>\r\n            </Form.Group>\r\n          </div>\r\n          {/* <FontAwesomeIcon style={styles} className=\"scrollIcon col-2 col-md-2 col-lg-3\"\r\n          icon={faChevronCircleDown}\r\n          />  */} \r\n          <div className=\"row justify-content-center\">\r\n            { formScroll ? <FormScroll /> :  buttonDown}    \r\n          </div>\r\n          <div className=\"row justify-content-center\">\r\n            { formScroll && buttonUp }    {/* CHECK IF THE COMPONENT IS GENERATED ENTIRELY */}\r\n          </div>\r\n          <div className=\"row d-flex justify-content-center\">\r\n            <Button variant=\"primary\" type=\"submit\" className=\"col-8 mb-3 col-sm-8 col-md-8 col-lg-6 justify-content-center\">\r\n                Submit\r\n            </Button>\r\n          </div>\r\n        </Form>\r\n                    {/*<div className=\"Actions\" >{this.renderActions()}</div>*/}\r\n                </div>\r\n                </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}