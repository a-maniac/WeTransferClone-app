{"ast":null,"code":"var _jsxFileName = \"C:\\\\we-transfer-clone\\\\app\\\\src\\\\components\\\\SearchFilterCountry.js\";\nimport React, { Component } from 'react';\nexport default class SearchFilterCountry extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onTextChanged = e => {\n      const {\n        items\n      } = this.props;\n      const value = e.target.value;\n      let suggestions = [];\n\n      if (value.length > 0) {\n        const regex = new RegExp(`^${value}`, 'i');\n        suggestions = items.sort().filter(v => regex.test(v));\n      }\n\n      this.setState(() => ({\n        suggestions,\n        text: value\n      }));\n    };\n\n    this.renderSuggestions = () => {\n      const {\n        suggestions\n      } = this.state;\n\n      if (suggestions.length === 0) {\n        return null;\n      }\n\n      return React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, suggestions.map((item, index) => React.createElement(\"li\", {\n        key: index,\n        onClick: () => this.suggestionSelected(item),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, item)));\n    };\n\n    this.state = {\n      suggestions: [],\n      text: \"\"\n    };\n  }\n\n  suggestionSelected(value) {\n    this.props.onChange(value);\n    console.log('value : ', value);\n    this.setState(() => ({\n      text: value,\n      suggestions: []\n    }));\n  }\n\n  render() {\n    const {\n      text\n    } = this.state;\n    return React.createElement(\"div\", {\n      className: \"autocomplete-country\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      value: text,\n      onChange: this.onTextChanged,\n      placeholder: \"Select a Country\",\n      type: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), this.renderSuggestions());\n  }\n\n}","map":{"version":3,"sources":["C:/we-transfer-clone/app/src/components/SearchFilterCountry.js"],"names":["React","Component","SearchFilterCountry","constructor","props","onTextChanged","e","items","value","target","suggestions","length","regex","RegExp","sort","filter","v","test","setState","text","renderSuggestions","state","map","item","index","suggestionSelected","onChange","console","log","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,eAAe,MAAMC,mBAAN,SAAkCD,SAAlC,CAA4C;AAEzDE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SASnBC,aATmB,GASFC,CAAD,IAAO;AACrB,YAAM;AAACC,QAAAA;AAAD,UAAU,KAAKH,KAArB;AACA,YAAMI,KAAK,GAAGF,CAAC,CAACG,MAAF,CAASD,KAAvB;AACA,UAAIE,WAAW,GAAG,EAAlB;;AAEA,UAAGF,KAAK,CAACG,MAAN,GAAe,CAAlB,EAAoB;AAClB,cAAMC,KAAK,GAAG,IAAIC,MAAJ,CAAY,IAAGL,KAAM,EAArB,EAAwB,GAAxB,CAAd;AACAE,QAAAA,WAAW,GAAGH,KAAK,CAACO,IAAN,GAAaC,MAAb,CAAoBC,CAAC,IAAIJ,KAAK,CAACK,IAAN,CAAWD,CAAX,CAAzB,CAAd;AACD;;AACC,WAAKE,QAAL,CAAc,OAAO;AAACR,QAAAA,WAAD;AAAcS,QAAAA,IAAI,EAAGX;AAArB,OAAP,CAAd;AAEH,KApBkB;;AAAA,SAgCnBY,iBAhCmB,GAgCC,MAAM;AAExB,YAAM;AAACV,QAAAA;AAAD,UAAgB,KAAKW,KAA3B;;AACA,UAAGX,WAAW,CAACC,MAAZ,KAAuB,CAA1B,EAA6B;AAE3B,eAAO,IAAP;AAED;;AACD,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGD,WAAW,CAACY,GAAZ,CAAgB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAAI,QAAA,GAAG,EAAEA,KAAT;AAAgB,QAAA,OAAO,EAAE,MAAM,KAAKC,kBAAL,CAAwBF,IAAxB,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA+DA,IAA/D,CAAjC,CADH,CADF;AAMD,KA9CkB;;AAGjB,SAAKF,KAAL,GAAa;AACVX,MAAAA,WAAW,EAAG,EADJ;AAEVS,MAAAA,IAAI,EAAG;AAFG,KAAb;AAID;;AAeDM,EAAAA,kBAAkB,CAACjB,KAAD,EAAQ;AACxB,SAAKJ,KAAL,CAAWsB,QAAX,CAAoBlB,KAApB;AAEAmB,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBpB,KAAxB;AACA,SAAKU,QAAL,CAAc,OAAO;AACnBC,MAAAA,IAAI,EAAGX,KADY;AAEnBE,MAAAA,WAAW,EAAG;AAFK,KAAP,CAAd;AAID;;AAkBDmB,EAAAA,MAAM,GAAG;AACP,UAAO;AAACV,MAAAA;AAAD,QAAS,KAAKE,KAArB;AACA,WACE;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC;AAAO,MAAA,KAAK,EAAEF,IAAd;AAAoB,MAAA,QAAQ,EAAE,KAAKd,aAAnC;AAAkD,MAAA,WAAW,EAAC,kBAA9D;AAAiF,MAAA,IAAI,EAAC,MAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,EAEE,KAAKe,iBAAL,EAFF,CADF;AAMD;;AA1DwD","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class SearchFilterCountry extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  \r\n    this.state = {\r\n       suggestions : [],\r\n       text : \"\"\r\n    }\r\n  }\r\n\r\n  onTextChanged = (e) => {\r\n    const {items} = this.props;\r\n    const value = e.target.value;\r\n    let suggestions = [];\r\n\r\n    if(value.length > 0){\r\n      const regex = new RegExp(`^${value}`, 'i');\r\n      suggestions = items.sort().filter(v => regex.test(v));\r\n    }\r\n      this.setState(() => ({suggestions, text : value}));\r\n  \r\n  }\r\n\r\n  suggestionSelected(value) {\r\n    this.props.onChange(value);\r\n\r\n    console.log('value : ', value);\r\n    this.setState(() => ({\r\n      text : value,\r\n      suggestions : []\r\n    }))\r\n  }\r\n  \r\n  renderSuggestions = () => {\r\n\r\n    const {suggestions} = this.state;\r\n    if(suggestions.length === 0) {\r\n\r\n      return null;\r\n\r\n    }\r\n    return (\r\n      <ul>\r\n        {suggestions.map((item, index) => <li key={index} onClick={() => this.suggestionSelected(item)}>{item}</li>)}\r\n      </ul>\r\n    )\r\n\r\n  }\r\n\r\n  render() {\r\n    const  {text} = this.state;\r\n    return (\r\n      <div className=\"autocomplete-country\">\r\n       <input value={text} onChange={this.onTextChanged} placeholder=\"Select a Country\" type=\"text\" /> \r\n       {this.renderSuggestions()}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}