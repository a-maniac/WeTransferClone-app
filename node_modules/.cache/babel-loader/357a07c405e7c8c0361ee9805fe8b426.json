{"ast":null,"code":"var _jsxFileName = \"C:\\\\we-transfer-clone\\\\app\\\\src\\\\components\\\\SearchFilterCountry.js\";\nimport React, { Component } from 'react';\nexport default class SearchFilterCountry extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onTextChanged = e => {\n      const value = e.target.value;\n      let suggestions = [];\n\n      if (value.length > 0) {\n        const regex = new RegExp(`^${value}`, 'i');\n        suggestions = this.items.sort().filter(v => regex.test(v));\n      }\n\n      this.setState(() => ({\n        suggestions\n      }));\n    };\n\n    this.renderSuggestions = () => {\n      const {\n        suggestions\n      } = this.state;\n\n      if (suggestions.length === 0) {\n        return null;\n      }\n\n      return React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, suggestions.map(item => React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, item)));\n    };\n\n    this.items = ['Algeria', 'albania'];\n    this.state = {\n      suggestions: [],\n      text: \"\"\n    };\n  }\n\n  render() {\n    const {\n      text\n    } = this.state;\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      value: text,\n      onChange: this.onTextChanged,\n      type: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), this.renderSuggestions());\n  }\n\n}","map":{"version":3,"sources":["C:/we-transfer-clone/app/src/components/SearchFilterCountry.js"],"names":["React","Component","SearchFilterCountry","constructor","props","onTextChanged","e","value","target","suggestions","length","regex","RegExp","items","sort","filter","v","test","setState","renderSuggestions","state","map","item","text","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,eAAe,MAAMC,mBAAN,SAAkCD,SAAlC,CAA4C;AAEzDE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAWnBC,aAXmB,GAWFC,CAAD,IAAO;AAErB,YAAMC,KAAK,GAAGD,CAAC,CAACE,MAAF,CAASD,KAAvB;AACA,UAAIE,WAAW,GAAG,EAAlB;;AAEA,UAAGF,KAAK,CAACG,MAAN,GAAe,CAAlB,EAAoB;AAClB,cAAMC,KAAK,GAAG,IAAIC,MAAJ,CAAY,IAAGL,KAAM,EAArB,EAAwB,GAAxB,CAAd;AACAE,QAAAA,WAAW,GAAG,KAAKI,KAAL,CAAWC,IAAX,GAAkBC,MAAlB,CAAyBC,CAAC,IAAIL,KAAK,CAACM,IAAN,CAAWD,CAAX,CAA9B,CAAd;AACD;;AACC,WAAKE,QAAL,CAAc,OAAO;AAACT,QAAAA;AAAD,OAAP,CAAd;AAEH,KAtBkB;;AAAA,SAwBnBU,iBAxBmB,GAwBC,MAAM;AAExB,YAAM;AAACV,QAAAA;AAAD,UAAgB,KAAKW,KAA3B;;AACA,UAAGX,WAAW,CAACC,MAAZ,KAAuB,CAA1B,EAA6B;AAE3B,eAAO,IAAP;AAED;;AACD,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGD,WAAW,CAACY,GAAZ,CAAiBC,IAAD,IAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKA,IAAL,CAA1B,CADH,CADF;AAMD,KAtCkB;;AAGjB,SAAKT,KAAL,GAAa,CAAC,SAAD,EAAY,SAAZ,CAAb;AAEA,SAAKO,KAAL,GAAa;AACVX,MAAAA,WAAW,EAAG,EADJ;AAEVc,MAAAA,IAAI,EAAG;AAFG,KAAb;AAID;;AA+BDC,EAAAA,MAAM,GAAG;AACP,UAAO;AAACD,MAAAA;AAAD,QAAS,KAAKH,KAArB;AACA,WACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC;AAAO,MAAA,KAAK,EAAEG,IAAd;AAAoB,MAAA,QAAQ,EAAE,KAAKlB,aAAnC;AAAkD,MAAA,IAAI,EAAC,MAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,EAEE,KAAKc,iBAAL,EAFF,CADF;AAMD;;AAlDwD","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class SearchFilterCountry extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.items = ['Algeria', 'albania'];\r\n  \r\n    this.state = {\r\n       suggestions : [],\r\n       text : \"\"\r\n    }\r\n  }\r\n\r\n  onTextChanged = (e) => {\r\n\r\n    const value = e.target.value;\r\n    let suggestions = [];\r\n\r\n    if(value.length > 0){\r\n      const regex = new RegExp(`^${value}`, 'i');\r\n      suggestions = this.items.sort().filter(v => regex.test(v));\r\n    }\r\n      this.setState(() => ({suggestions}));\r\n  \r\n  }\r\n  \r\n  renderSuggestions = () => {\r\n\r\n    const {suggestions} = this.state;\r\n    if(suggestions.length === 0) {\r\n\r\n      return null;\r\n\r\n    }\r\n    return (\r\n      <ul>\r\n        {suggestions.map((item) => <li>{item}</li>)}\r\n      </ul>\r\n    )\r\n\r\n  }\r\n\r\n  render() {\r\n    const  {text} = this.state;\r\n    return (\r\n      <React.Fragment>\r\n       <input value={text} onChange={this.onTextChanged} type=\"text\"  /> \r\n       {this.renderSuggestions()}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}