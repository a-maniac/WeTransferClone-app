{"ast":null,"code":"import _contains from './internal/_contains';\nimport _curry2 from './internal/_curry2';\n/**\n * Finds the set (i.e. no duplicates) of all elements in the first list not\n * contained in the second list. Objects and Arrays are compared in terms of\n * value equality, not reference equality.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` that are not in `list2`.\n * @see R.differenceWith, R.symmetricDifference, R.symmetricDifferenceWith, R.without\n * @example\n *\n *      R.difference([1,2,3,4], [7,6,5,4,3]); //=> [1,2]\n *      R.difference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5]\n *      R.difference([{a: 1}, {b: 2}], [{a: 1}, {c: 3}]) //=> [{b: 2}]\n */\n\nvar difference = /*#__PURE__*/_curry2(function difference(first, second) {\n  var out = [];\n  var idx = 0;\n  var firstLen = first.length;\n\n  while (idx < firstLen) {\n    if (!_contains(first[idx], second) && !_contains(first[idx], out)) {\n      out[out.length] = first[idx];\n    }\n\n    idx += 1;\n  }\n\n  return out;\n});\n\nexport default difference;","map":{"version":3,"sources":["C:/we-transfer-clone/app/node_modules/ramda/es/difference.js"],"names":["_contains","_curry2","difference","first","second","out","idx","firstLen","length"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,sBAAtB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AAEA;;;;;;;;;;;;;;;;;;;;;AAoBA,IAAIC,UAAU,GAAG,aAAaD,OAAO,CAAC,SAASC,UAAT,CAAoBC,KAApB,EAA2BC,MAA3B,EAAmC;AACvE,MAAIC,GAAG,GAAG,EAAV;AACA,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,QAAQ,GAAGJ,KAAK,CAACK,MAArB;;AACA,SAAOF,GAAG,GAAGC,QAAb,EAAuB;AACrB,QAAI,CAACP,SAAS,CAACG,KAAK,CAACG,GAAD,CAAN,EAAaF,MAAb,CAAV,IAAkC,CAACJ,SAAS,CAACG,KAAK,CAACG,GAAD,CAAN,EAAaD,GAAb,CAAhD,EAAmE;AACjEA,MAAAA,GAAG,CAACA,GAAG,CAACG,MAAL,CAAH,GAAkBL,KAAK,CAACG,GAAD,CAAvB;AACD;;AACDA,IAAAA,GAAG,IAAI,CAAP;AACD;;AACD,SAAOD,GAAP;AACD,CAXoC,CAArC;;AAYA,eAAeH,UAAf","sourcesContent":["import _contains from './internal/_contains';\nimport _curry2 from './internal/_curry2';\n\n/**\n * Finds the set (i.e. no duplicates) of all elements in the first list not\n * contained in the second list. Objects and Arrays are compared in terms of\n * value equality, not reference equality.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` that are not in `list2`.\n * @see R.differenceWith, R.symmetricDifference, R.symmetricDifferenceWith, R.without\n * @example\n *\n *      R.difference([1,2,3,4], [7,6,5,4,3]); //=> [1,2]\n *      R.difference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5]\n *      R.difference([{a: 1}, {b: 2}], [{a: 1}, {c: 3}]) //=> [{b: 2}]\n */\nvar difference = /*#__PURE__*/_curry2(function difference(first, second) {\n  var out = [];\n  var idx = 0;\n  var firstLen = first.length;\n  while (idx < firstLen) {\n    if (!_contains(first[idx], second) && !_contains(first[idx], out)) {\n      out[out.length] = first[idx];\n    }\n    idx += 1;\n  }\n  return out;\n});\nexport default difference;"]},"metadata":{},"sourceType":"module"}