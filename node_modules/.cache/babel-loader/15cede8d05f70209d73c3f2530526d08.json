{"ast":null,"code":"var _jsxFileName = \"C:\\\\we-transfer-clone\\\\app\\\\src\\\\upload\\\\Upload.js\";\nimport React, { Component } from 'react';\nimport Dropzone from '../dropzone/Dropzone';\nimport checkCircle from \"../checkCircle.svg\";\nimport Progress from '../progress/Progress';\nimport './Upload.css';\nexport default class Upload extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      files: [],\n      uploading: false,\n      uploadProgress: {},\n      successfullUploaded: false\n    };\n    this.onFilesAdded = this.onFilesAdded.bind(this);\n    this.uploadFiles = this.uploadFiles.bind(this);\n    this.sendRequest = this.sendRequest.bind(this);\n    this.renderActions = this.renderActions.bind(this);\n  }\n\n  onFilesAdded(files) {\n    this.setState(prevState => ({\n      files: prevState.files.concat(files)\n    }));\n  }\n\n  renderProgress(file) {\n    const uploadProgress = this.state.uploadProgress[file.name];\n\n    if (this.state.uploading || this.state.successfullUploaded) {\n      return React.createElement(\"div\", {\n        className: \"ProgressWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, React.createElement(Progress, {\n        progress: uploadProgress ? uploadProgress.percentage : 0,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }), React.createElement(\"img\", {\n        className: \"CheckIcon\",\n        alt: \"done\",\n        src: checkCircle,\n        style: {\n          opacity: uploadProgress && uploadProgress.state === \"done\" ? 0.5 : 0\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }));\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"Upload\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"Title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"Upload Files\"), React.createElement(\"div\", {\n      className: \"Content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(Dropzone, {\n      onFilesAdded: this.onFilesAdded,\n      disabled: this.state.uploading || this.state.successfullUploaded,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"Files\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, this.state.files.map(file => {\n      return React.createElement(\"div\", {\n        key: file.name,\n        className: \"Row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"Filename\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, file.name), this.renderProgress(file));\n    })), React.createElement(\"div\", {\n      className: \"Actions\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:/we-transfer-clone/app/src/upload/Upload.js"],"names":["React","Component","Dropzone","Progress","Upload","constructor","props","state","files","uploading","uploadProgress","successfullUploaded","onFilesAdded","bind","uploadFiles","sendRequest","renderActions","setState","prevState","concat","renderProgress","file","name","percentage","checkCircle","opacity","render","map"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport Dropzone from '../dropzone/Dropzone';\r\nimport checkCircle from '../checkCircle.svg';\r\nimport Progress from '../progress/Progress';\r\nimport './Upload.css'\r\n\r\nexport default class Upload extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n            files: [],\r\n            uploading: false,\r\n            uploadProgress: {},\r\n            successfullUploaded: false\r\n          }\r\n\r\n          this.onFilesAdded = this.onFilesAdded.bind(this);\r\n          this.uploadFiles = this.uploadFiles.bind(this);\r\n          this.sendRequest = this.sendRequest.bind(this);\r\n          this.renderActions = this.renderActions.bind(this);\r\n    }\r\n\r\n    onFilesAdded(files) {\r\n        this.setState(prevState => ({\r\n          files: prevState.files.concat(files)\r\n        }));\r\n      }\r\n\r\n      renderProgress(file) {\r\n        const uploadProgress = this.state.uploadProgress[file.name];\r\n        if (this.state.uploading || this.state.successfullUploaded) {\r\n          return (\r\n            <div className=\"ProgressWrapper\">\r\n              <Progress progress={uploadProgress ? uploadProgress.percentage : 0} />\r\n              <img\r\n                className=\"CheckIcon\"\r\n                alt=\"done\"\r\n                src={checkCircle}\r\n                style={{\r\n                  opacity:\r\n                    uploadProgress && uploadProgress.state === \"done\" ? 0.5 : 0\r\n                }}\r\n              />\r\n            </div>\r\n          );\r\n        }\r\n      }\r\n    \r\n\r\n    render() {\r\n        return (\r\n                <div className=\"Upload\">\r\n                    <span className=\"Title\">Upload Files</span>\r\n                    <div className=\"Content\">\r\n                    <div>\r\n            <Dropzone\r\n              onFilesAdded={this.onFilesAdded}\r\n              disabled={this.state.uploading || this.state.successfullUploaded}\r\n            />\r\n            </div>\r\n                    <div className=\"Files\">\r\n                        {this.state.files.map(file => {\r\n                        return (\r\n                            <div key={file.name} className=\"Row\">\r\n                            <span className=\"Filename\">{file.name}</span>\r\n                            {this.renderProgress(file)}\r\n                            </div>\r\n                        );\r\n                        })}\r\n                    </div>\r\n                    <div className=\"Actions\" />\r\n                </div>\r\n                </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}