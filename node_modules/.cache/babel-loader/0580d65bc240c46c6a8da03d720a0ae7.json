{"ast":null,"code":"import _checkForMethod from './internal/_checkForMethod';\nimport _curry2 from './internal/_curry2';\n/**\n * Creates a new list with the separator interposed between elements.\n *\n * Dispatches to the `intersperse` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig a -> [a] -> [a]\n * @param {*} separator The element to add to the list.\n * @param {Array} list The list to be interposed.\n * @return {Array} The new list.\n * @example\n *\n *      R.intersperse('n', ['ba', 'a', 'a']); //=> ['ba', 'n', 'a', 'n', 'a']\n */\n\nvar intersperse = /*#__PURE__*/_curry2( /*#__PURE__*/_checkForMethod('intersperse', function intersperse(separator, list) {\n  var out = [];\n  var idx = 0;\n  var length = list.length;\n\n  while (idx < length) {\n    if (idx === length - 1) {\n      out.push(list[idx]);\n    } else {\n      out.push(list[idx], separator);\n    }\n\n    idx += 1;\n  }\n\n  return out;\n}));\n\nexport default intersperse;","map":{"version":3,"sources":["C:/we-transfer-clone/app/node_modules/ramda/es/intersperse.js"],"names":["_checkForMethod","_curry2","intersperse","separator","list","out","idx","length","push"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,4BAA5B;AACA,OAAOC,OAAP,MAAoB,oBAApB;AAEA;;;;;;;;;;;;;;;;;;AAiBA,IAAIC,WAAW,GAAG,aAAaD,OAAO,EAAE,aAAaD,eAAe,CAAC,aAAD,EAAgB,SAASE,WAAT,CAAqBC,SAArB,EAAgCC,IAAhC,EAAsC;AACxH,MAAIC,GAAG,GAAG,EAAV;AACA,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,MAAM,GAAGH,IAAI,CAACG,MAAlB;;AACA,SAAOD,GAAG,GAAGC,MAAb,EAAqB;AACnB,QAAID,GAAG,KAAKC,MAAM,GAAG,CAArB,EAAwB;AACtBF,MAAAA,GAAG,CAACG,IAAJ,CAASJ,IAAI,CAACE,GAAD,CAAb;AACD,KAFD,MAEO;AACLD,MAAAA,GAAG,CAACG,IAAJ,CAASJ,IAAI,CAACE,GAAD,CAAb,EAAoBH,SAApB;AACD;;AACDG,IAAAA,GAAG,IAAI,CAAP;AACD;;AACD,SAAOD,GAAP;AACD,CAbmE,CAA9B,CAAtC;;AAcA,eAAeH,WAAf","sourcesContent":["import _checkForMethod from './internal/_checkForMethod';\nimport _curry2 from './internal/_curry2';\n\n/**\n * Creates a new list with the separator interposed between elements.\n *\n * Dispatches to the `intersperse` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig a -> [a] -> [a]\n * @param {*} separator The element to add to the list.\n * @param {Array} list The list to be interposed.\n * @return {Array} The new list.\n * @example\n *\n *      R.intersperse('n', ['ba', 'a', 'a']); //=> ['ba', 'n', 'a', 'n', 'a']\n */\nvar intersperse = /*#__PURE__*/_curry2( /*#__PURE__*/_checkForMethod('intersperse', function intersperse(separator, list) {\n  var out = [];\n  var idx = 0;\n  var length = list.length;\n  while (idx < length) {\n    if (idx === length - 1) {\n      out.push(list[idx]);\n    } else {\n      out.push(list[idx], separator);\n    }\n    idx += 1;\n  }\n  return out;\n}));\nexport default intersperse;"]},"metadata":{},"sourceType":"module"}