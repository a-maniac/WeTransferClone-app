{"ast":null,"code":"var _jsxFileName = \"C:\\\\we-transfer-clone\\\\app\\\\src\\\\components\\\\HomeForm.js\";\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport { upload } from '../helpers/Upload';\nimport { _isEmail } from '../helpers/email';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nexport default class HomeForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this._checkForm = (fields = [], callback = () => {}) => {\n      let {\n        form,\n        errors\n      } = this.state;\n      const validations = {\n        to: [{\n          errorMessage: \"To is required !\",\n          isValid: () => {\n            return form.to.length;\n          }\n        }, {\n          errorMessage: \"Email is not valid\",\n          isValid: () => {\n            return _isEmail(form.to);\n          }\n        }],\n        from: [{\n          errorMessage: \"From is required !\",\n          isValid: () => {\n            return form.from.length;\n          }\n        }, {\n          errorMessage: \"Email is not valid\",\n          isValid: () => {\n            return _isEmail(form.from);\n          }\n        }],\n        files: [{\n          errorMessage: \"Files is required\",\n          isValid: () => {\n            return form.files.length;\n          }\n        }],\n        pathsOfFiles: [{\n          errorMessage: \"Path not valid\",\n          isValid: () => {\n            return form.pathsOfFiles.length;\n          }\n        }]\n      };\n\n      _.each(fields, field => {\n        let fieldValidations = _.get(validations, field, []); //validations[field]\n\n\n        errors[field] = null;\n\n        _.each(fieldValidations, fieldValidation => {\n          const isValid = fieldValidation.isValid();\n\n          if (!isValid) {\n            errors[field] = fieldValidation.errorMessage;\n          }\n        });\n      });\n\n      this.setState({\n        errors: errors\n      }, () => {\n        let isValid = true;\n\n        _.each(errors, err => {\n          if (err != null) {\n            isValid = false;\n          }\n        });\n\n        return callback(isValid);\n      });\n    };\n\n    this._onTextChange = event => {\n      let {\n        form\n      } = this.state;\n      const fieldName = event.target.name;\n      const fieldValue = event.target.value;\n      form[fieldName] = fieldValue;\n      this.setState({\n        form: form\n      });\n    };\n\n    this._onFileAdded = event => {\n      let files = this.state.form.files;\n      let pathsOfFiles = this.state.form.pathsOfFiles;\n      let path = null;\n      let rootPath = null;\n      let index = null;\n\n      _.each(_.get(event, 'target.files', []), file => {\n        files.push(file);\n        pathsOfFiles.push(_.get(file, 'webkitRelativePath', null));\n        path = _.get(file, 'webkitRelativePath', null);\n      });\n\n      console.log('files : ', files);\n\n      if (path != null) {\n        console.log('PATH : ', path);\n        index = path.indexOf('/');\n        rootPath = path.substring(0, index);\n        console.log('rootPath : ', rootPath);\n      }\n\n      this.setState({\n        form: { ...this.state.form,\n          files: files,\n          pathsOfFiles: pathsOfFiles,\n          rootPath: rootPath\n        }\n      }, () => {\n        this._checkForm(['files'], isValid => {});\n      });\n    };\n\n    this._onSubmit = event => {\n      event.preventDefault();\n\n      this._checkForm(['from', 'to', 'files', 'pathsOfFiles'], isValid => {\n        if (isValid) {\n          const data = this.state.form;\n\n          if (this.props.onUploadBegin) {\n            this.props.onUploadBegin(data);\n          } //form is valid and ready to be submitted \n\n\n          upload(data, event => {\n            if (this.props.onUploadEvent) {\n              console.log('onUploadEvent callback', event);\n              this.props.onUploadEvent(event);\n            }\n          });\n        }\n      }); //console.log(this.state.form);\n\n    };\n\n    this.state = {\n      form: {\n        files: [],\n        pathsOfFiles: [],\n        to: '',\n        from: '',\n        message: '',\n        rootPath: ''\n      },\n      errors: {\n        to: null,\n        from: null,\n        message: null,\n        files: null,\n        pathsOfFiles: []\n      }\n    };\n    this._onTextChange = this._onTextChange.bind(this);\n    this._onSubmit = this._onSubmit.bind(this);\n    this._checkForm = this._checkForm.bind(this);\n    this._onFileAdded = this._onFileAdded.bind(this); //this._onFolderAdded = this._onFolderAdded.bind(this);\n\n    this._onFileRemove = this._onFileRemove.bind(this);\n  }\n\n  _onFileRemove(key) {\n    let {\n      files\n    } = this.state.form;\n    files.splice(key, 1);\n    this.setState({\n      form: { ...this.state.form,\n        files: files\n      }\n    });\n  }\n\n  render() {\n    const {\n      form,\n      errors,\n      rootPath\n    } = this.state;\n    const {\n      files\n    } = form;\n    const list = React.createElement(\"div\", {\n      className: \"app-files-selected\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, files.map((file, index) => {\n      return React.createElement(\"div\", {\n        className: \"app-file-selected-item\",\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"file-name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, rootPath ? rootPath : file.name), React.createElement(\"div\", {\n        className: \"file-action\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"app-file-remove\",\n        type: \"button\",\n        onClick: () => this._onFileRemove(index),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, \"X\")));\n    }));\n    return React.createElement(\"div\", {\n      className: \"app-card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this._onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"app-card-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"app-card-header-inner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, files.length ? list : null, React.createElement(\"div\", {\n      className: classNames('app-file-select-zone', {\n        'error': _.get(errors, 'files')\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"input-file\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: \"input-file\",\n      type: \"file\",\n      onChange: this._onFileAdded,\n      multiple: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }), files.length ? React.createElement(\"span\", {\n      className: \"app-upload-description text-uppercase\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, \"Add more files\") : React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: classNames(\"app-upload-icon\", {\n        'error': _.get(errors, files)\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"icon-picture-streamline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    })), React.createElement(\"span\", {\n      className: \"app-upload-description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, \"Drag and Drop your Files Here\")))), React.createElement(\"label\", {\n      htmlFor: \"input-folder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: \"input-file\",\n      type: \"file\",\n      directory: \"\",\n      webkitdirectory: \"\",\n      onChange: this._onFileAdded,\n      multiple: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }), files.length ? React.createElement(\"span\", {\n      className: \"app-upload-description text-uppercase\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, \"Add more files\") : React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: classNames(\"app-upload-icon\", {\n        'error': _.get(errors, files)\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"icon-picture-streamline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    })), React.createElement(\"span\", {\n      className: \"app-upload-description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, \"Drag and Drop your Files Here\"))))), React.createElement(\"div\", {\n      className: \"app-card-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"app-card-content-inner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classNames(\"app-form-item\", {\n        'error': _.get(errors, 'to')\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"to\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, \"Send To\"), React.createElement(\"input\", {\n      name: \"to\",\n      value: form.to,\n      onChange: this._onTextChange,\n      type: \"text\",\n      placeholder: _.get(errors, 'to') ? _.get(errors, 'to') : \"Email Address\",\n      id: \"to\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: classNames(\"app-form-item\", {\n        'error': _.get(errors, 'from')\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"from\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, \"From\"), React.createElement(\"input\", {\n      name: \"from\",\n      value: form.from,\n      onChange: this._onTextChange,\n      type: \"text\",\n      placeholder: _.get(errors, 'from') ? _.get(errors, 'from') : \"Your Email Address\",\n      id: \"from\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"app-form-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }, \"Message\"), React.createElement(\"textarea\", {\n      id: \"message\",\n      value: form.message,\n      onChange: this._onTextChange,\n      placeholder: \"Add a note (optional)\",\n      name: \"message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"app-form-actions\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"app-button primary\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }, \"Send\"))))));\n  }\n\n}\nHomeForm.propTypes = {\n  onUploadBegin: PropTypes.func,\n  upload: PropTypes.func\n};","map":{"version":3,"sources":["C:/we-transfer-clone/app/src/components/HomeForm.js"],"names":["React","Component","classNames","upload","_isEmail","PropTypes","_","HomeForm","constructor","props","_checkForm","fields","callback","form","errors","state","validations","to","errorMessage","isValid","length","from","files","pathsOfFiles","each","field","fieldValidations","get","fieldValidation","setState","err","_onTextChange","event","fieldName","target","name","fieldValue","value","_onFileAdded","path","rootPath","index","file","push","console","log","indexOf","substring","_onSubmit","preventDefault","data","onUploadBegin","onUploadEvent","message","bind","_onFileRemove","key","splice","render","list","map","propTypes","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport classNames from 'classnames';\r\nimport {upload} from '../helpers/Upload';\r\nimport {_isEmail} from '../helpers/email';\r\nimport PropTypes from 'prop-types';\r\nimport _ from 'lodash';\r\n\r\nexport default class HomeForm extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             form : {\r\n                 files : [],\r\n                 pathsOfFiles : [],\r\n                 to : '',\r\n                 from : '',\r\n                 message : '',\r\n                 rootPath : ''\r\n             },\r\n\r\n             errors : {\r\n                 to : null,\r\n                 from : null,\r\n                 message : null,\r\n                 files : null,\r\n                 pathsOfFiles : []\r\n             }\r\n        }\r\n\r\n        this._onTextChange = this._onTextChange.bind(this);\r\n        this._onSubmit = this._onSubmit.bind(this);\r\n        this._checkForm = this._checkForm.bind(this);\r\n        this._onFileAdded = this._onFileAdded.bind(this);\r\n        //this._onFolderAdded = this._onFolderAdded.bind(this);\r\n        this._onFileRemove = this._onFileRemove.bind(this);\r\n    }\r\n\r\n    _checkForm = (fields = [], callback = () => {}) => {\r\n\r\n        let {form, errors} = this.state;\r\n\r\n        const validations = {\r\n\r\n            to : [\r\n                {\r\n                    errorMessage : \"To is required !\",\r\n                    isValid : () => {\r\n                        return form.to.length;\r\n                    }\r\n                },\r\n\r\n                {\r\n                    errorMessage : \"Email is not valid\",\r\n                    isValid : () => {\r\n                        return _isEmail(form.to);\r\n                    }\r\n                }\r\n            ],\r\n\r\n            from : [\r\n                {\r\n                    errorMessage : \"From is required !\",\r\n                    isValid : () => {\r\n                        return form.from.length;\r\n                    }\r\n                },\r\n\r\n                {\r\n                    errorMessage : \"Email is not valid\",\r\n                    isValid : () => {\r\n                        return _isEmail(form.from);\r\n                    }\r\n                }\r\n            ],\r\n\r\n            files : [\r\n                {\r\n                    errorMessage : \"Files is required\",\r\n                    isValid : () => {\r\n                        return form.files.length;\r\n                    }\r\n                }\r\n            ], \r\n\r\n            pathsOfFiles : [\r\n                {\r\n                    errorMessage : \"Path not valid\",\r\n                    isValid : () => {\r\n                        return form.pathsOfFiles.length;\r\n                    }\r\n                }\r\n            ]\r\n\r\n        }\r\n\r\n        _.each(fields, field => {\r\n\r\n            let fieldValidations = _.get(validations, field, []); //validations[field]\r\n\r\n            errors[field] = null;\r\n\r\n            _.each(fieldValidations, fieldValidation => {\r\n                \r\n                const isValid = fieldValidation.isValid();\r\n\r\n                if(!isValid) {\r\n\r\n                    errors[field] = fieldValidation.errorMessage;\r\n                }\r\n            })\r\n        })\r\n\r\n        this.setState({\r\n            errors : errors\r\n        }, () => {\r\n            let isValid = true;\r\n            _.each(errors, (err) => {\r\n                if(err != null) {\r\n                    isValid = false;\r\n                }\r\n            });\r\n            return callback(isValid);\r\n        })\r\n    }\r\n    \r\n    _onTextChange = (event) => {\r\n\r\n        let {form} = this.state;\r\n        const fieldName = event.target.name;\r\n        const fieldValue = event.target.value;\r\n\r\n        form[fieldName] = fieldValue;\r\n        this.setState({\r\n            form : form\r\n        })\r\n    }\r\n\r\n    _onFileAdded = (event) => {\r\n\r\n        let files = this.state.form.files;\r\n        let pathsOfFiles = this.state.form.pathsOfFiles;\r\n        let path = null\r\n        let rootPath = null;\r\n        let index = null;\r\n\r\n        _.each(_.get(event, 'target.files', []), file => {\r\n            files.push(file);\r\n            pathsOfFiles.push(_.get(file, 'webkitRelativePath', null));\r\n            path = _.get(file, 'webkitRelativePath', null);\r\n        })\r\n\r\n        console.log('files : ', files);\r\n\r\n        if(path != null) {\r\n\r\n            console.log('PATH : ', path);\r\n            index = path.indexOf('/');\r\n            rootPath = path.substring(0, index);\r\n            console.log('rootPath : ', rootPath);\r\n        }\r\n\r\n        this.setState({\r\n            form : {\r\n                ...this.state.form,\r\n                files : files, \r\n                pathsOfFiles : pathsOfFiles,\r\n                rootPath : rootPath\r\n            }\r\n        }, () => {\r\n            this._checkForm(['files'], (isValid) => {\r\n                \r\n            })\r\n        })\r\n    }\r\n\r\n    _onFileRemove(key) {\r\n        let {files} = this.state.form;\r\n        files.splice(key, 1);\r\n\r\n        this.setState({\r\n            form : {\r\n                ...this.state.form,\r\n                files : files\r\n            }\r\n        })\r\n    }\r\n\r\n    _onSubmit = (event) => {\r\n        event.preventDefault();\r\n        this._checkForm(['from', 'to', 'files', 'pathsOfFiles'], (isValid) => {\r\n            \r\n            if(isValid) {\r\n                const data = this.state.form;\r\n                if(this.props.onUploadBegin) {\r\n                    this.props.onUploadBegin(data);\r\n                }\r\n                //form is valid and ready to be submitted \r\n                upload(data, (event) => {\r\n                    if(this.props.onUploadEvent) {\r\n                        console.log('onUploadEvent callback', event);\r\n                        this.props.onUploadEvent(event);\r\n                    }\r\n                })\r\n            }\r\n\r\n        });\r\n        //console.log(this.state.form);\r\n    }\r\n\r\n    render() {\r\n\r\n        const {form, errors, rootPath} = this.state;\r\n        const {files} = form;\r\n\r\n        const list = (\r\n                    <div className=\"app-files-selected\">\r\n                        {\r\n                                \r\n                                files.map((file, index) => {\r\n                                    return (\r\n                                    <div className=\"app-file-selected-item\" key={index}>\r\n                                        <div className=\"file-name\">{rootPath ? rootPath : file.name}</div>\r\n                                        <div className=\"file-action\">\r\n                                            <button className=\"app-file-remove\" type=\"button\" onClick={() => this._onFileRemove(index)}>X</button>\r\n                                        </div>\r\n                                    </div>\r\n                                    )\r\n                                })\r\n                        }\r\n                        \r\n                    </div>\r\n                    )\r\n\r\n        return (\r\n            \r\n            <div className=\"app-card\">\r\n                <form onSubmit={this._onSubmit}>\r\n                    <div className=\"app-card-header\">\r\n                        <div className=\"app-card-header-inner\">\r\n                            {\r\n                                files.length ? list : null\r\n                            }\r\n                            <div className={classNames('app-file-select-zone', {'error' : _.get(errors, 'files')})} >\r\n                                <label htmlFor='input-file'>\r\n                                    <input id='input-file' type=\"file\" onChange={this._onFileAdded} multiple={true} />\r\n                                    {\r\n                                        files.length ? <span className=\"app-upload-description text-uppercase\">\r\n                                            Add more files</span> : \r\n                                            <span>\r\n                                                <span className={classNames(\"app-upload-icon\", {'error' : _.get(errors, files)})}><i className=\"icon-picture-streamline\" /></span>\r\n                                                <span className=\"app-upload-description\">\r\n                                                    Drag and Drop your Files Here\r\n                                                </span>\r\n                                            </span>\r\n                                    }\r\n                                </label>\r\n                            </div>\r\n                            <label htmlFor='input-folder'>\r\n                                <input id='input-file' type=\"file\" directory=\"\" webkitdirectory=\"\" onChange={this._onFileAdded} multiple={true} />\r\n                                    {\r\n                                        files.length ? <span className=\"app-upload-description text-uppercase\">\r\n                                            Add more files</span> : \r\n                                            <span>\r\n                                                <span className={classNames(\"app-upload-icon\", {'error' : _.get(errors, files)})}><i className=\"icon-picture-streamline\" /></span>\r\n                                                <span className=\"app-upload-description\">\r\n                                                    Drag and Drop your Files Here\r\n                                                </span>\r\n                                            </span>\r\n                                    }\r\n                                </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"app-card-content\">\r\n                        <div className=\"app-card-content-inner\">\r\n                            <div className={classNames(\"app-form-item\", {'error' : _.get(errors, 'to')})}>\r\n                                <label htmlFor=\"to\">Send To</label>\r\n                                <input name=\"to\" value={form.to} onChange={this._onTextChange} type=\"text\" placeholder={_.get(errors, 'to') ? _.get(errors,'to') : \"Email Address\"} id=\"to\" /> \r\n                            </div>\r\n\r\n                            <div className={classNames(\"app-form-item\", {'error' : _.get(errors, 'from')})}>\r\n                                <label htmlFor=\"from\">From</label>\r\n                                <input name=\"from\" value={form.from} onChange={this._onTextChange} type=\"text\" placeholder={_.get(errors, 'from') ? _.get(errors, 'from') : \"Your Email Address\"} id=\"from\" /> \r\n                            </div>\r\n\r\n                            <div className=\"app-form-item\">\r\n                                <label htmlFor=\"message\">Message</label>\r\n                                <textarea id=\"message\" value={form.message} onChange={this._onTextChange} placeholder=\"Add a note (optional)\" name=\"message\" />\r\n                            </div>\r\n\r\n                            <div className=\"app-form-actions\">\r\n                                <button className=\"app-button primary\" type=\"submit\">Send</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n          \r\n        )\r\n    }\r\n}\r\n\r\nHomeForm.propTypes = {\r\n    onUploadBegin : PropTypes.func,\r\n    upload : PropTypes.func\r\n};\r\n"]},"metadata":{},"sourceType":"module"}