{"ast":null,"code":"var _jsxFileName = \"C:\\\\we-transfer-clone\\\\app\\\\src\\\\components\\\\HomeForm.js\";\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport { upload } from '../helpers/Upload';\nimport { _isEmail } from '../helpers/email';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nexport default class HomeForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this._checkForm = (fields = [], callback = () => {}) => {\n      let {\n        form,\n        errors\n      } = this.state;\n      const validations = {\n        to: [{\n          errorMessage: \"To is required !\",\n          isValid: () => {\n            return form.to.length;\n          }\n        }, {\n          errorMessage: \"Email is not valid\",\n          isValid: () => {\n            return _isEmail(form.to);\n          }\n        }],\n        from: [{\n          errorMessage: \"From is required !\",\n          isValid: () => {\n            return form.from.length;\n          }\n        }, {\n          errorMessage: \"Email is not valid\",\n          isValid: () => {\n            return _isEmail(form.from);\n          }\n        }],\n        files: [{\n          errorMessage: \"Files is required\",\n          isValid: () => {\n            return form.files.length;\n          }\n        }]\n        /*\r\n                    pathsOfFiles : [\r\n                        {\r\n                            errorMessage : \"Path not valid\",\r\n                            isValid : () => {\r\n                                return form.pathsOfFiles.length;\r\n                            }\r\n                        }\r\n                    ]\r\n        */\n\n      };\n\n      _.each(fields, field => {\n        let fieldValidations = _.get(validations, field, []); //validations[field]\n\n\n        errors[field] = null;\n\n        _.each(fieldValidations, fieldValidation => {\n          const isValid = fieldValidation.isValid();\n\n          if (!isValid) {\n            errors[field] = fieldValidation.errorMessage;\n          }\n        });\n      });\n\n      this.setState({\n        errors: errors\n      }, () => {\n        let isValid = true;\n\n        _.each(errors, err => {\n          if (err != null) {\n            isValid = false;\n          }\n        });\n\n        return callback(isValid);\n      });\n    };\n\n    this._onTextChange = event => {\n      let {\n        form\n      } = this.state;\n      const fieldName = event.target.name;\n      const fieldValue = event.target.value;\n      form[fieldName] = fieldValue;\n      this.setState({\n        form: form\n      });\n    };\n\n    this._onFileAdded = event => {\n      let files = this.state.form.files;\n      let namesOfElements = this.state.form.namesOfElements; //let pathsOfFiles = this.state.form.pathsOfFiles;\n\n      _.each(_.get(event, 'target.files', []), file => {\n        files.push(file); //pathsOfFiles.push(_.get(file, 'webkitRelativePath', null));\n\n        namesOfElements.push(file.name);\n      });\n\n      console.log('files : ', files);\n      this.setState({\n        form: { ...this.state.form,\n          files: files,\n          namesOfElements: namesOfElements\n        }\n      }, () => {\n        this._checkForm(['files'], isValid => {});\n      });\n    };\n\n    this._onFolderAdded = event => {\n      let files = this.state.form.files;\n      let namesOfElements = this.state.form.namesOfElements;\n      let folder = []; //CREATE ARRAY NAME OF OBJECTS ON STATE AND POPULATE IT EVERYTIME WE ADD FILE OR FOLDER\n\n      let path = null;\n      let rootPath = null;\n      let index = null;\n\n      _.each(_.get(event, 'target.files', []), file => {\n        folder.push(file);\n        path = _.get(file, 'webkitRelativePath', null);\n      });\n\n      console.log('PATH : ', path);\n      index = path.indexOf('/');\n      rootPath = path.substring(0, index);\n      namesOfElements.push(rootPath);\n      console.log('rootPath : ', rootPath);\n      files = files.concat([folder]);\n      console.log('files after concatenation : ', files);\n      this.setState({\n        form: { ...this.state.form,\n          files: files,\n          namesOfElements: namesOfElements\n        }\n      }, () => {\n        this._checkForm(['files'], isValid => {});\n      });\n    };\n\n    this._fillPathsOfFiles = finalArrayFiles => {\n      let path = null;\n      let pathsOfFiles = [];\n\n      _.each(finalArrayFiles, file => {\n        path = _.get(file, 'webkitRelativePath', null);\n        pathsOfFiles.push(path);\n      });\n\n      return pathsOfFiles;\n    };\n\n    this._removeSquareBrackets = event => {\n      event.preventDefault();\n      const {\n        files\n      } = this.state.form;\n      let finalArrayFiles = files;\n      finalArrayFiles = [].concat.apply([], files);\n      console.log('finalArrayFiles from REMOVESQUARE : ', finalArrayFiles);\n      this.setState({\n        files: finalArrayFiles\n      }, () => {\n        this._onSubmit();\n      });\n    };\n\n    this._onSubmit = () => {\n      this._checkForm(['from', 'to', 'files'\n      /*, 'pathsOfFiles'*/\n      ], isValid => {\n        if (isValid) {\n          console.log('AAAAAAAAAAA');\n\n          this._removeSquareBrackets();\n\n          const data = this.state.form;\n          const {\n            files\n          } = this.state.form;\n          console.log('BBBBBBBBBBBBBBBB');\n\n          const finalPathsOfFiles = this._fillPathsOfFiles(files);\n\n          console.log('finalPathsOfFiles from _onSubmit : ', finalPathsOfFiles);\n\n          if (this.props.onUploadBegin) {\n            this.props.onUploadBegin(data);\n          } //form is valid and ready to be submitted \n\n\n          upload(data, finalPathsOfFiles, event => {\n            if (this.props.onUploadEvent) {\n              console.log('onUploadEvent callback', event);\n              this.props.onUploadEvent(event);\n            }\n          });\n        }\n      }); //console.log(this.state.form);\n\n    };\n\n    this.state = {\n      form: {\n        files: [],\n        //pathsOfFiles : [],\n        namesOfElements: [],\n        to: '',\n        from: '',\n        message: '',\n        rootPath: ''\n      },\n      errors: {\n        to: null,\n        from: null,\n        message: null,\n        files: null //pathsOfFiles : []\n\n      }\n    };\n    this._onTextChange = this._onTextChange.bind(this);\n    this._onSubmit = this._onSubmit.bind(this);\n    this._checkForm = this._checkForm.bind(this);\n    this._onFileAdded = this._onFileAdded.bind(this);\n    this._onFolderAdded = this._onFolderAdded.bind(this);\n    this._onFileRemove = this._onFileRemove.bind(this);\n    this._fillPathsOfFiles = this._fillPathsOfFiles.bind(this);\n    this._removeSquareBrackets = this._removeSquareBrackets.bind(this);\n  }\n\n  _onFileRemove(key) {\n    let {\n      namesOfElements\n    } = this.state.form;\n    let {\n      files\n    } = this.state.form;\n    console.log('files before removing : ', files);\n    console.log('namesOfElements before removing : ', namesOfElements);\n    namesOfElements.splice(key, 1);\n    files.splice(key, 1);\n    console.log('files after removing : ', files);\n    console.log('namesOfElements after removing : ', namesOfElements);\n    this.setState({\n      form: { ...this.state.form,\n        files: files,\n        namesOfElements: namesOfElements\n      }\n    });\n  }\n\n  render() {\n    const {\n      form,\n      errors\n    } = this.state;\n    const {\n      files\n    } = form;\n    const {\n      namesOfElements\n    } = form;\n    const list = React.createElement(\"div\", {\n      className: \"app-files-selected\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, namesOfElements.map((name, index) => {\n      return React.createElement(\"div\", {\n        className: \"app-file-selected-item\",\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"file-name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313\n        },\n        __self: this\n      }, name), React.createElement(\"div\", {\n        className: \"file-action\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"app-file-remove\",\n        type: \"button\",\n        onClick: () => this._onFileRemove(index),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315\n        },\n        __self: this\n      }, \"X\")));\n    }));\n    return React.createElement(\"div\", {\n      className: \"app-card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this._removeSquareBrackets,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"app-card-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"app-card-header-inner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }, files.length ? list : null, React.createElement(\"div\", {\n      className: classNames('app-file-select-zone', {\n        'error': _.get(errors, 'files')\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"input-file\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: \"input-file\",\n      type: \"file\",\n      onChange: this._onFileAdded,\n      multiple: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }), files.length ? React.createElement(\"span\", {\n      className: \"app-upload-description text-uppercase\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }, \"Add more files\") : React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: classNames(\"app-upload-icon\", {\n        'error': _.get(errors, files)\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"icon-picture-streamline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    })), React.createElement(\"span\", {\n      className: \"app-upload-description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }, \"Drag and Drop your Files Here\")))), React.createElement(\"label\", {\n      htmlFor: \"input-folder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: \"input-file\",\n      type: \"file\",\n      directory: \"\",\n      webkitdirectory: \"\",\n      onChange: this._onFolderAdded,\n      multiple: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }), files.length ? React.createElement(\"span\", {\n      className: \"app-upload-description text-uppercase\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }, \"Add more files\") : React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: classNames(\"app-upload-icon\", {\n        'error': _.get(errors, files)\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"icon-picture-streamline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    })), React.createElement(\"span\", {\n      className: \"app-upload-description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    }, \"Drag and Drop your Files Here\"))))), React.createElement(\"div\", {\n      className: \"app-card-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"app-card-content-inner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classNames(\"app-form-item\", {\n        'error': _.get(errors, 'to')\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"to\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }, \"Send To\"), React.createElement(\"input\", {\n      name: \"to\",\n      value: form.to,\n      onChange: this._onTextChange,\n      type: \"text\",\n      placeholder: _.get(errors, 'to') ? _.get(errors, 'to') : \"Email Address\",\n      id: \"to\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: classNames(\"app-form-item\", {\n        'error': _.get(errors, 'from')\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"from\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372\n      },\n      __self: this\n    }, \"From\"), React.createElement(\"input\", {\n      name: \"from\",\n      value: form.from,\n      onChange: this._onTextChange,\n      type: \"text\",\n      placeholder: _.get(errors, 'from') ? _.get(errors, 'from') : \"Your Email Address\",\n      id: \"from\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"app-form-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    }, \"Message\"), React.createElement(\"textarea\", {\n      id: \"message\",\n      value: form.message,\n      onChange: this._onTextChange,\n      placeholder: \"Add a note (optional)\",\n      name: \"message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"app-form-actions\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"app-button primary\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }, \"Send\"))))));\n  }\n\n}\nHomeForm.propTypes = {\n  onUploadBegin: PropTypes.func,\n  upload: PropTypes.func\n};","map":{"version":3,"sources":["C:/we-transfer-clone/app/src/components/HomeForm.js"],"names":["React","Component","classNames","upload","_isEmail","PropTypes","_","HomeForm","constructor","props","_checkForm","fields","callback","form","errors","state","validations","to","errorMessage","isValid","length","from","files","each","field","fieldValidations","get","fieldValidation","setState","err","_onTextChange","event","fieldName","target","name","fieldValue","value","_onFileAdded","namesOfElements","file","push","console","log","_onFolderAdded","folder","path","rootPath","index","indexOf","substring","concat","_fillPathsOfFiles","finalArrayFiles","pathsOfFiles","_removeSquareBrackets","preventDefault","apply","_onSubmit","data","finalPathsOfFiles","onUploadBegin","onUploadEvent","message","bind","_onFileRemove","key","splice","render","list","map","propTypes","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport classNames from 'classnames';\r\nimport {upload} from '../helpers/Upload';\r\nimport {_isEmail} from '../helpers/email';\r\nimport PropTypes from 'prop-types';\r\nimport _ from 'lodash';\r\n\r\nexport default class HomeForm extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             form : {\r\n                 files : [],\r\n                 //pathsOfFiles : [],\r\n                 namesOfElements : [],\r\n                 to : '',\r\n                 from : '',\r\n                 message : '',\r\n                 rootPath : ''\r\n             },\r\n\r\n             errors : {\r\n                 to : null,\r\n                 from : null,\r\n                 message : null,\r\n                 files : null,\r\n                 //pathsOfFiles : []\r\n             }\r\n        }\r\n\r\n        this._onTextChange = this._onTextChange.bind(this);\r\n        this._onSubmit = this._onSubmit.bind(this);\r\n        this._checkForm = this._checkForm.bind(this);\r\n        this._onFileAdded = this._onFileAdded.bind(this);\r\n        this._onFolderAdded = this._onFolderAdded.bind(this);\r\n        this._onFileRemove = this._onFileRemove.bind(this);\r\n        this._fillPathsOfFiles = this._fillPathsOfFiles.bind(this);\r\n        this._removeSquareBrackets = this._removeSquareBrackets.bind(this);\r\n    }\r\n\r\n    _checkForm = (fields = [], callback = () => {}) => {\r\n\r\n        let {form, errors} = this.state;\r\n\r\n        const validations = {\r\n\r\n            to : [\r\n                {\r\n                    errorMessage : \"To is required !\",\r\n                    isValid : () => {\r\n                        return form.to.length;\r\n                    }\r\n                },\r\n\r\n                {\r\n                    errorMessage : \"Email is not valid\",\r\n                    isValid : () => {\r\n                        return _isEmail(form.to);\r\n                    }\r\n                }\r\n            ],\r\n\r\n            from : [\r\n                {\r\n                    errorMessage : \"From is required !\",\r\n                    isValid : () => {\r\n                        return form.from.length;\r\n                    }\r\n                },\r\n\r\n                {\r\n                    errorMessage : \"Email is not valid\",\r\n                    isValid : () => {\r\n                        return _isEmail(form.from);\r\n                    }\r\n                }\r\n            ],\r\n\r\n            files : [\r\n                {\r\n                    errorMessage : \"Files is required\",\r\n                    isValid : () => {\r\n                        return form.files.length;\r\n                    }\r\n                }\r\n            ], \r\n/*\r\n            pathsOfFiles : [\r\n                {\r\n                    errorMessage : \"Path not valid\",\r\n                    isValid : () => {\r\n                        return form.pathsOfFiles.length;\r\n                    }\r\n                }\r\n            ]\r\n*/\r\n        }\r\n\r\n        _.each(fields, field => {\r\n\r\n            let fieldValidations = _.get(validations, field, []); //validations[field]\r\n\r\n            errors[field] = null;\r\n\r\n            _.each(fieldValidations, fieldValidation => {\r\n                \r\n                const isValid = fieldValidation.isValid();\r\n\r\n                if(!isValid) {\r\n\r\n                    errors[field] = fieldValidation.errorMessage;\r\n                }\r\n            })\r\n        })\r\n\r\n        this.setState({\r\n            errors : errors\r\n        }, () => {\r\n            let isValid = true;\r\n            _.each(errors, (err) => {\r\n                if(err != null) {\r\n                    isValid = false;\r\n                }\r\n            });\r\n            return callback(isValid);\r\n        })\r\n    }\r\n    \r\n    _onTextChange = (event) => {\r\n\r\n        let {form} = this.state;\r\n        const fieldName = event.target.name;\r\n        const fieldValue = event.target.value;\r\n\r\n        form[fieldName] = fieldValue;\r\n        this.setState({\r\n            form : form\r\n        })\r\n    }\r\n\r\n    _onFileAdded = (event) => {\r\n\r\n        let files = this.state.form.files;\r\n        let namesOfElements = this.state.form.namesOfElements;\r\n        //let pathsOfFiles = this.state.form.pathsOfFiles;\r\n\r\n        _.each(_.get(event, 'target.files', []), file => {\r\n            files.push(file);\r\n            //pathsOfFiles.push(_.get(file, 'webkitRelativePath', null));\r\n            namesOfElements.push(file.name);\r\n        })\r\n\r\n        console.log('files : ', files);\r\n\r\n        this.setState({\r\n            form : {\r\n                ...this.state.form,\r\n                files : files, \r\n                namesOfElements : namesOfElements\r\n            }\r\n        }, () => {\r\n            this._checkForm(['files'], (isValid) => {\r\n                \r\n            })\r\n        })\r\n    }\r\n\r\n    _onFolderAdded = (event) => {\r\n        let files = this.state.form.files;\r\n        let namesOfElements = this.state.form.namesOfElements;\r\n        let folder = [];\r\n        //CREATE ARRAY NAME OF OBJECTS ON STATE AND POPULATE IT EVERYTIME WE ADD FILE OR FOLDER\r\n        let path = null\r\n        let rootPath = null;\r\n        let index = null;\r\n\r\n        _.each(_.get(event, 'target.files', []), file => {\r\n            folder.push(file);\r\n            path = _.get(file, 'webkitRelativePath', null);\r\n        })\r\n\r\n            console.log('PATH : ', path);\r\n\r\n            index = path.indexOf('/');\r\n            rootPath = path.substring(0, index);\r\n\r\n            namesOfElements.push(rootPath);\r\n\r\n        console.log('rootPath : ', rootPath);\r\n\r\n        files = files.concat([folder]);\r\n\r\n        console.log('files after concatenation : ', files);\r\n        \r\n\r\n        this.setState({\r\n            form : {\r\n                ...this.state.form,\r\n                files : files,\r\n                namesOfElements : namesOfElements\r\n            }\r\n        }, () => {\r\n            this._checkForm(['files'], (isValid) => {\r\n                \r\n            })\r\n        })\r\n    }\r\n\r\n    _onFileRemove(key) {\r\n        let {namesOfElements} = this.state.form;\r\n        let {files} = this.state.form;\r\n\r\n        console.log('files before removing : ', files);\r\n        console.log('namesOfElements before removing : ', namesOfElements);\r\n\r\n        namesOfElements.splice(key, 1);\r\n        files.splice(key, 1);\r\n\r\n        console.log('files after removing : ', files);\r\n        console.log('namesOfElements after removing : ', namesOfElements);\r\n\r\n        this.setState({\r\n            form : {\r\n                ...this.state.form,\r\n                files : files,\r\n                namesOfElements : namesOfElements\r\n            }\r\n        })\r\n    }\r\n\r\n    _fillPathsOfFiles = (finalArrayFiles) => {\r\n\r\n        let path = null;\r\n        let pathsOfFiles = [];\r\n\r\n        _.each(finalArrayFiles, (file) => {\r\n            \r\n            path = _.get(file, 'webkitRelativePath', null);\r\n            pathsOfFiles.push(path);\r\n        });\r\n\r\n        return pathsOfFiles;\r\n\r\n    }\r\n\r\n    _removeSquareBrackets = (event) => {\r\n        event.preventDefault();\r\n        const {files} = this.state.form;\r\n        let finalArrayFiles = files;\r\n\r\n        finalArrayFiles = [].concat.apply([], files);\r\n\r\n        console.log('finalArrayFiles from REMOVESQUARE : ', finalArrayFiles);\r\n\r\n        this.setState({\r\n            files : finalArrayFiles\r\n        }, () => {\r\n            this._onSubmit();\r\n        });\r\n\r\n    }\r\n\r\n    _onSubmit = () => {\r\n        \r\n        this._checkForm(['from', 'to', 'files' /*, 'pathsOfFiles'*/], (isValid) => {\r\n            \r\n            if(isValid) {\r\n                \r\n                console.log('AAAAAAAAAAA');\r\n                \r\n                this._removeSquareBrackets();\r\n                \r\n                const data = this.state.form;\r\n                const {files} = this.state.form;\r\n                \r\n                console.log('BBBBBBBBBBBBBBBB');\r\n                \r\n                const finalPathsOfFiles = this._fillPathsOfFiles(files);\r\n\r\n                console.log('finalPathsOfFiles from _onSubmit : ', finalPathsOfFiles);\r\n\r\n                if(this.props.onUploadBegin) {\r\n                    this.props.onUploadBegin(data);\r\n                }\r\n                //form is valid and ready to be submitted \r\n                upload(data, finalPathsOfFiles, (event) => {\r\n                    if(this.props.onUploadEvent) {\r\n                        console.log('onUploadEvent callback', event);\r\n                        this.props.onUploadEvent(event);\r\n                    }\r\n                })\r\n            }\r\n\r\n        });\r\n        //console.log(this.state.form);\r\n    }\r\n\r\n    render() {\r\n\r\n        const {form, errors} = this.state;\r\n        const {files} = form;\r\n        const {namesOfElements} = form;\r\n\r\n        const list = (\r\n                    <div className=\"app-files-selected\">\r\n                        {\r\n                                \r\n                                namesOfElements.map((name, index) => {\r\n                                    return (\r\n                                    <div className=\"app-file-selected-item\" key={index}>\r\n                                        <div className=\"file-name\">{name}</div>\r\n                                        <div className=\"file-action\">\r\n                                            <button className=\"app-file-remove\" type=\"button\" onClick={() => this._onFileRemove(index)}>X</button>\r\n                                        </div>\r\n                                    </div>\r\n                                    )\r\n                                })\r\n                        }\r\n                        \r\n                    </div>\r\n                    )\r\n\r\n        return (\r\n            \r\n            <div className=\"app-card\">\r\n                <form onSubmit={this._removeSquareBrackets}>\r\n                    <div className=\"app-card-header\">\r\n                        <div className=\"app-card-header-inner\">\r\n                            {\r\n                                files.length ? list : null\r\n                            }\r\n                            <div className={classNames('app-file-select-zone', {'error' : _.get(errors, 'files')})} >\r\n                                <label htmlFor='input-file'>\r\n                                    <input id='input-file' type=\"file\" onChange={this._onFileAdded} multiple={true} />\r\n                                    {\r\n                                        files.length ? <span className=\"app-upload-description text-uppercase\">\r\n                                            Add more files</span> : \r\n                                            <span>\r\n                                                <span className={classNames(\"app-upload-icon\", {'error' : _.get(errors, files)})}><i className=\"icon-picture-streamline\" /></span>\r\n                                                <span className=\"app-upload-description\">\r\n                                                    Drag and Drop your Files Here\r\n                                                </span>\r\n                                            </span>\r\n                                    }\r\n                                </label>\r\n                            </div>\r\n                            <label htmlFor='input-folder'>\r\n                                <input id='input-file' type=\"file\" directory=\"\" webkitdirectory=\"\" onChange={this._onFolderAdded} multiple={true} />\r\n                                    {\r\n                                        files.length ? <span className=\"app-upload-description text-uppercase\">\r\n                                            Add more files</span> : \r\n                                            <span>\r\n                                                <span className={classNames(\"app-upload-icon\", {'error' : _.get(errors, files)})}><i className=\"icon-picture-streamline\" /></span>\r\n                                                <span className=\"app-upload-description\">\r\n                                                    Drag and Drop your Files Here\r\n                                                </span>\r\n                                            </span>\r\n                                    }\r\n                                </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"app-card-content\">\r\n                        <div className=\"app-card-content-inner\">\r\n                            <div className={classNames(\"app-form-item\", {'error' : _.get(errors, 'to')})}>\r\n                                <label htmlFor=\"to\">Send To</label>\r\n                                <input name=\"to\" value={form.to} onChange={this._onTextChange} type=\"text\" placeholder={_.get(errors, 'to') ? _.get(errors,'to') : \"Email Address\"} id=\"to\" /> \r\n                            </div>\r\n\r\n                            <div className={classNames(\"app-form-item\", {'error' : _.get(errors, 'from')})}>\r\n                                <label htmlFor=\"from\">From</label>\r\n                                <input name=\"from\" value={form.from} onChange={this._onTextChange} type=\"text\" placeholder={_.get(errors, 'from') ? _.get(errors, 'from') : \"Your Email Address\"} id=\"from\" /> \r\n                            </div>\r\n\r\n                            <div className=\"app-form-item\">\r\n                                <label htmlFor=\"message\">Message</label>\r\n                                <textarea id=\"message\" value={form.message} onChange={this._onTextChange} placeholder=\"Add a note (optional)\" name=\"message\" />\r\n                            </div>\r\n\r\n                            <div className=\"app-form-actions\">\r\n                                <button className=\"app-button primary\" type=\"submit\">Send</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n          \r\n        )\r\n    }\r\n}\r\n\r\nHomeForm.propTypes = {\r\n    onUploadBegin : PropTypes.func,\r\n    upload : PropTypes.func\r\n};\r\n"]},"metadata":{},"sourceType":"module"}