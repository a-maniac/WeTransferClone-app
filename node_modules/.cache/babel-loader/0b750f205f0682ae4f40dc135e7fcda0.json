{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseLinux = exports.parsedfT = exports.splitdfTLine = exports.parsefdiskl = exports.parsefdisklVolumeData = exports.parsefdisklDeviceData = exports.parselsblk = exports.parselsblkVolumeData = exports.parselsblkDeviceData = exports.mergeVolumesAndDevicesLinux = exports.createNewVolume = exports.createNewDevice = exports.getNodeId = exports.COMMAND = undefined;\n\nvar _toArray2 = require('babel-runtime/helpers/toArray');\n\nvar _toArray3 = _interopRequireDefault(_toArray2);\n\nvar _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');\n\nvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);\n\nvar _entries = require('babel-runtime/core-js/object/entries');\n\nvar _entries2 = _interopRequireDefault(_entries);\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _functional = require('../functional');\n\nvar _functional2 = _interopRequireDefault(_functional);\n\nvar _utilities = require('../utilities');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar _F$R = _functional2.default.R,\n    compose = _F$R.compose,\n    map = _F$R.map,\n    reduce = _F$R.reduce,\n    filter = _F$R.filter;\nvar COMMAND = exports.COMMAND = 'df -T && ' + 'echo \"\" && echo \"**********\" && echo \"\" && ' + 'fdisk -l && ' + 'echo \"\" && echo \"**********\" && echo \"\" && ' + 'lsblk -o kname,fstype,mountpoint,label,ro,rm,model,type -P';\n\nvar getNodeId = exports.getNodeId = function getNodeId(node) {\n  return (0, _utilities.lasti)(node.split('/').filter(function (s) {\n    return s.trim();\n  }));\n};\n\nvar createNewDevice = exports.createNewDevice = function createNewDevice(emptyDevice) {\n  return function (id) {\n    var node = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var device = emptyDevice();\n    device.id = id;\n    device.node = node || '/dev/' + id;\n    device.name = id;\n    device.whole = true;\n    device.parent = id;\n    return device;\n  };\n};\n\nvar createNewVolume = exports.createNewVolume = function createNewVolume(emptyVolume) {\n  return function (id) {\n    var node = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var volume = emptyVolume();\n    volume.id = id;\n    volume.node = node || '/dev/' + id;\n    volume.name = id;\n    volume.parent = id.match(/[a-z]+/)[0];\n    return volume;\n  };\n};\n\nvar mergeVolumesAndDevicesLinux = exports.mergeVolumesAndDevicesLinux = function mergeVolumesAndDevicesLinux(emptyDevice) {\n  return function (_ref) {\n    var devices = _ref.devices,\n        volumes = _ref.volumes;\n    var vkeys = (0, _keys2.default)(volumes); // Merge volumes to devices\n\n    (0, _entries2.default)(devices).forEach(function (_ref2) {\n      var _ref3 = (0, _slicedToArray3.default)(_ref2, 2),\n          key = _ref3[0],\n          dev = _ref3[1];\n\n      var vkeysForDev = vkeys.filter(function (k) {\n        return (0, _utilities.hasSubstr)(k, key);\n      }); // volume keys that belong to current device\n\n      dev.volumes = vkeysForDev.map(function (k) {\n        var volume = volumes[k];\n        if (dev.volumeBlockSize) volume.blockSize = dev.volumeBlockSize;\n        return volume;\n      });\n    }); // Remove the volumeBlockSize property from the devices\n\n    return {\n      devices: map(function (d) {\n        return reduce(function (a, v, k) {\n          if (k !== 'volumeBlockSize') a[k] = v;\n          return a;\n        }, emptyDevice())(d);\n      }, devices)\n    };\n  };\n}; // Values Example\n// ['sdc1', 'vfat', '/media/user/KINGSTON', 'KINGSTON', '0', '1', '', 'part']\n\n/*\n * 0: KNAME\n * 1: FSTYPE\n * 2: MOUNTPOINT\n * 3: LABEL\n * 4: RO\n * 5: RM\n * 6: MODEL\n * 7: TYPE\n */\n\n\nvar parselsblkDeviceData = exports.parselsblkDeviceData = function parselsblkDeviceData(createNewDevice) {\n  return function (acc) {\n    return function (_ref4) {\n      var _ref5 = (0, _slicedToArray3.default)(_ref4, 8),\n          id = _ref5[0],\n          fs = _ref5[1],\n          mountPoint = _ref5[2],\n          label = _ref5[3],\n          readOnly = _ref5[4],\n          removable = _ref5[5],\n          model = _ref5[6],\n          _ = _ref5[7];\n\n      if (!acc.devices[id]) {\n        acc.devices[id] = createNewDevice(id);\n      }\n\n      acc.devices[id].readOnly = !!parseInt(readOnly);\n      acc.devices[id].removable = !!parseInt(removable);\n      acc.devices[id].description = acc.devices[id].description || label || null;\n      return acc;\n    };\n  };\n};\n\nvar parselsblkVolumeData = exports.parselsblkVolumeData = function parselsblkVolumeData(createNewVolume) {\n  return function (acc) {\n    return function (_ref6) {\n      var _ref7 = (0, _slicedToArray3.default)(_ref6, 8),\n          id = _ref7[0],\n          fs = _ref7[1],\n          mountPoint = _ref7[2],\n          label = _ref7[3],\n          readOnly = _ref7[4],\n          removable = _ref7[5],\n          model = _ref7[6],\n          _ = _ref7[7];\n\n      if (!acc.volumes[id]) {\n        acc.volumes[id] = createNewVolume(id);\n      }\n\n      acc.volumes[id].fs = fs || null;\n      acc.volumes[id].mounted = !!mountPoint;\n      acc.volumes[id].mountPoint = mountPoint || null;\n      acc.volumes[id].readOnly = !!parseInt(readOnly);\n      acc.volumes[id].removable = !!parseInt(removable);\n      acc.volumes[id].description = acc.volumes[id].description || label || null;\n      return acc;\n    };\n  };\n};\n\nvar parselsblk = exports.parselsblk = function parselsblk(parselsblkDeviceData, parselsblkVolumeData) {\n  return function (lsblk) {\n    return function (acc) {\n      var lines = lsblk.split('\\n') // Split by line\n      .filter(function (s) {\n        return s.trim();\n      }); // Remove empty lines\n\n      lines.forEach(function (line) {\n        var fields = line.match(/([A-Z]+=\"[^\"]*\")+/g);\n        var values = fields.map(function (field) {\n          return field.replace(/\"/g, '').split('=')[1];\n        });\n\n        if (values[values.length - 1] === 'disk') {\n          return parselsblkDeviceData(acc)(values);\n        }\n\n        return parselsblkVolumeData(acc)(values);\n      });\n      return acc;\n    };\n  };\n};\n\nvar parsefdisklDeviceData = exports.parsefdisklDeviceData = function parsefdisklDeviceData(getNodeId, createNewDevice) {\n  return function (acc) {\n    return function (_ref8) {\n      var _ref9 = (0, _toArray3.default)(_ref8),\n          head = _ref9[0],\n          tail = _ref9.slice(1);\n\n      var matches = head.match(/Disk\\s(.*):\\s.*,\\s(\\d+)\\sbytes,\\s(\\d+) sectors/);\n\n      if (matches == null) {\n        throw new Error('parsefdisklDeviceData: error on parsing (head = ' + head + ')');\n      }\n\n      var _matches$slice = matches.slice(1),\n          _matches$slice2 = (0, _slicedToArray3.default)(_matches$slice, 3),\n          node = _matches$slice2[0],\n          size = _matches$slice2[1],\n          blocks = _matches$slice2[2];\n\n      var id = getNodeId(node);\n\n      if (!acc.devices[id]) {\n        acc.devices[id] = createNewDevice(id, node);\n      }\n\n      acc.devices[id].blocks = parseInt(blocks);\n      acc.devices[id].size = parseInt(size);\n      tail.forEach(function (line) {\n        if (line.match(/Sector.*:\\s\\d+\\sbytes/)) {\n          var _line$match$slice = line.match(/(\\d+)\\s.*\\s(\\d+)\\s/).slice(1),\n              _line$match$slice2 = (0, _slicedToArray3.default)(_line$match$slice, 2),\n              logical = _line$match$slice2[0],\n              physical = _line$match$slice2[1];\n\n          acc.devices[id].blockSize = parseInt(physical);\n          acc.devices[id].volumeBlockSize = parseInt(logical);\n        }\n      });\n      return acc;\n    };\n  };\n};\n\nvar parsefdisklVolumeData = exports.parsefdisklVolumeData = function parsefdisklVolumeData(getNodeId, createNewVolume) {\n  return function (acc) {\n    return function (lines) {\n      return lines.reduce(function (acc, line) {\n        var matches = line.match(/([\\w\\\\/]+)\\s+.*\\s(\\d+)\\s+[\\w.]+\\s(.*)/);\n\n        if (matches == null) {\n          throw new Error('parsefdisklVolumeData: error on parsing (line = ' + line + ')');\n        }\n\n        var _matches$slice3 = matches.slice(1),\n            _matches$slice4 = (0, _slicedToArray3.default)(_matches$slice3, 3),\n            node = _matches$slice4[0],\n            sectors = _matches$slice4[1],\n            description = _matches$slice4[2];\n\n        var id = getNodeId(node);\n\n        if (!acc.volumes[id]) {\n          acc.volumes[id] = createNewVolume(id, node);\n        }\n\n        acc.volumes[id].blocks = parseInt(sectors);\n        acc.volumes[id].description = description;\n        return acc;\n      }, acc);\n    };\n  };\n};\n\nvar parsefdiskl = exports.parsefdiskl = function parsefdiskl(parsefdisklDeviceData, parsefdisklVolumeData) {\n  return function (fdiskl) {\n    return function (acc) {\n      var processblock = function processblock(block) {\n        if (block[0].startsWith('Disk')) {\n          return parsefdisklDeviceData(acc)(block);\n        } else if (block[0].startsWith('Device')) {\n          return parsefdisklVolumeData(acc)(block.slice(1));\n        }\n      };\n\n      var lines = fdiskl.split('\\n');\n      var block = [];\n      var i = 0;\n\n      while (i < lines.length) {\n        var item = lines[i];\n\n        if (item === '' && block.length > 0) {\n          // process previous block\n          processblock(block); // start new block\n\n          block = [];\n        } else if (item !== '') {\n          block.push(item);\n        }\n\n        i++;\n      }\n\n      ;\n      return acc;\n    };\n  };\n}; // split by space, except if space is preceeded by \\ (paths with spaces)\n// This is used instead of a negative lookbehind (`(?<!\\\\)\\s+`)\n\n\nvar splitdfTLine = exports.splitdfTLine = function splitdfTLine(line) {\n  return line.split(/\\s+/).filter(function (s) {\n    return s.trim();\n  }).reduce(function (a, field) {\n    if ((0, _utilities.lasti)(a) && (0, _utilities.lasti)((0, _utilities.lasti)(a)) === '\\\\') {\n      a[a.length - 1] += ' ' + field;\n    } else {\n      a.push(field);\n    }\n\n    return a;\n  }, []);\n};\n\nvar parsedfT = exports.parsedfT = function parsedfT(getNodeId, createNewVolume, splitdfTLine) {\n  return function (dft) {\n    return function (acc) {\n      var lines = dft.split('\\n').filter(function (s) {\n        return s.trim() && !(0, _utilities.hasSubstr)(s, 'tmpfs');\n      }) // remove empty lines & tmp file systems\n      .slice(1); // remove table header\n\n      return lines.reduce(function (acc, line) {\n        var _splitdfTLine = splitdfTLine(line),\n            _splitdfTLine2 = (0, _slicedToArray3.default)(_splitdfTLine, 7),\n            node = _splitdfTLine2[0],\n            filesystem = _splitdfTLine2[1],\n            size = _splitdfTLine2[2],\n            used = _splitdfTLine2[3],\n            available = _splitdfTLine2[4],\n            mountPoint = _splitdfTLine2[6];\n\n        var id = getNodeId(node);\n        acc.volumes[id] = createNewVolume(id, node);\n        acc.volumes[id].mounted = true;\n        acc.volumes[id].mountPoint = mountPoint;\n        acc.volumes[id].fs = filesystem === 'vfat' ? 'FAT32' : filesystem;\n        acc.volumes[id].space.total = parseInt(size) * 1024;\n        acc.volumes[id].space.available = parseInt(available) * 1024;\n        acc.volumes[id].space.used = parseInt(used) * 1024;\n        return acc;\n      }, acc);\n    };\n  };\n};\n\nvar parseLinux = exports.parseLinux = function parseLinux(mergeVolumesAndDevicesLinux, parselsblk, parsefdiskl, parsedfT) {\n  return function (userFilter) {\n    return function (output) {\n      var parts = output.split('\\n**********\\n\\n');\n\n      var _parts = (0, _slicedToArray3.default)(parts, 3),\n          dft = _parts[0],\n          fdiskl = _parts[1],\n          lsblk = _parts[2];\n\n      var accumulator = compose(mergeVolumesAndDevicesLinux, parselsblk(lsblk), parsefdiskl(fdiskl), parsedfT(dft))({\n        devices: {},\n        volumes: {}\n      });\n      return {\n        devices: filter(userFilter, accumulator.devices)\n      };\n    };\n  };\n};","map":{"version":3,"sources":["C:/we-transfer-clone/app/node_modules/fs-filesystem/esm/linux/linux.js"],"names":["Object","defineProperty","exports","value","parseLinux","parsedfT","splitdfTLine","parsefdiskl","parsefdisklVolumeData","parsefdisklDeviceData","parselsblk","parselsblkVolumeData","parselsblkDeviceData","mergeVolumesAndDevicesLinux","createNewVolume","createNewDevice","getNodeId","COMMAND","undefined","_toArray2","require","_toArray3","_interopRequireDefault","_slicedToArray2","_slicedToArray3","_entries","_entries2","_keys","_keys2","_functional","_functional2","_utilities","obj","__esModule","default","_F$R","R","compose","map","reduce","filter","node","lasti","split","s","trim","emptyDevice","id","arguments","length","device","name","whole","parent","emptyVolume","volume","match","_ref","devices","volumes","vkeys","forEach","_ref2","_ref3","key","dev","vkeysForDev","k","hasSubstr","volumeBlockSize","blockSize","d","a","v","acc","_ref4","_ref5","fs","mountPoint","label","readOnly","removable","model","_","parseInt","description","_ref6","_ref7","mounted","lsblk","lines","line","fields","values","field","replace","_ref8","_ref9","head","tail","slice","matches","Error","_matches$slice","_matches$slice2","size","blocks","_line$match$slice","_line$match$slice2","logical","physical","_matches$slice3","_matches$slice4","sectors","fdiskl","processblock","block","startsWith","i","item","push","dft","_splitdfTLine","_splitdfTLine2","filesystem","used","available","space","total","userFilter","output","parts","_parts","accumulator"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseLinux = exports.parsedfT = exports.splitdfTLine = exports.parsefdiskl = exports.parsefdisklVolumeData = exports.parsefdisklDeviceData = exports.parselsblk = exports.parselsblkVolumeData = exports.parselsblkDeviceData = exports.mergeVolumesAndDevicesLinux = exports.createNewVolume = exports.createNewDevice = exports.getNodeId = exports.COMMAND = undefined;\n\nvar _toArray2 = require('babel-runtime/helpers/toArray');\n\nvar _toArray3 = _interopRequireDefault(_toArray2);\n\nvar _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');\n\nvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);\n\nvar _entries = require('babel-runtime/core-js/object/entries');\n\nvar _entries2 = _interopRequireDefault(_entries);\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _functional = require('../functional');\n\nvar _functional2 = _interopRequireDefault(_functional);\n\nvar _utilities = require('../utilities');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _F$R = _functional2.default.R,\n    compose = _F$R.compose,\n    map = _F$R.map,\n    reduce = _F$R.reduce,\n    filter = _F$R.filter;\nvar COMMAND = exports.COMMAND = 'df -T && ' + 'echo \"\" && echo \"**********\" && echo \"\" && ' + 'fdisk -l && ' + 'echo \"\" && echo \"**********\" && echo \"\" && ' + 'lsblk -o kname,fstype,mountpoint,label,ro,rm,model,type -P';\n\nvar getNodeId = exports.getNodeId = function getNodeId(node) {\n  return (0, _utilities.lasti)(node.split('/').filter(function (s) {\n    return s.trim();\n  }));\n};\n\nvar createNewDevice = exports.createNewDevice = function createNewDevice(emptyDevice) {\n  return function (id) {\n    var node = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    var device = emptyDevice();\n    device.id = id;\n    device.node = node || '/dev/' + id;\n    device.name = id;\n    device.whole = true;\n    device.parent = id;\n    return device;\n  };\n};\n\nvar createNewVolume = exports.createNewVolume = function createNewVolume(emptyVolume) {\n  return function (id) {\n    var node = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    var volume = emptyVolume();\n    volume.id = id;\n    volume.node = node || '/dev/' + id;\n    volume.name = id;\n    volume.parent = id.match(/[a-z]+/)[0];\n    return volume;\n  };\n};\n\nvar mergeVolumesAndDevicesLinux = exports.mergeVolumesAndDevicesLinux = function mergeVolumesAndDevicesLinux(emptyDevice) {\n  return function (_ref) {\n    var devices = _ref.devices,\n        volumes = _ref.volumes;\n\n    var vkeys = (0, _keys2.default)(volumes);\n    // Merge volumes to devices\n    (0, _entries2.default)(devices).forEach(function (_ref2) {\n      var _ref3 = (0, _slicedToArray3.default)(_ref2, 2),\n          key = _ref3[0],\n          dev = _ref3[1];\n\n      var vkeysForDev = vkeys.filter(function (k) {\n        return (0, _utilities.hasSubstr)(k, key);\n      }); // volume keys that belong to current device\n      dev.volumes = vkeysForDev.map(function (k) {\n        var volume = volumes[k];\n        if (dev.volumeBlockSize) volume.blockSize = dev.volumeBlockSize;\n        return volume;\n      });\n    });\n    // Remove the volumeBlockSize property from the devices\n    return {\n      devices: map(function (d) {\n        return reduce(function (a, v, k) {\n          if (k !== 'volumeBlockSize') a[k] = v;\n          return a;\n        }, emptyDevice())(d);\n      }, devices)\n    };\n  };\n};\n\n// Values Example\n// ['sdc1', 'vfat', '/media/user/KINGSTON', 'KINGSTON', '0', '1', '', 'part']\n/*\n * 0: KNAME\n * 1: FSTYPE\n * 2: MOUNTPOINT\n * 3: LABEL\n * 4: RO\n * 5: RM\n * 6: MODEL\n * 7: TYPE\n */\nvar parselsblkDeviceData = exports.parselsblkDeviceData = function parselsblkDeviceData(createNewDevice) {\n  return function (acc) {\n    return function (_ref4) {\n      var _ref5 = (0, _slicedToArray3.default)(_ref4, 8),\n          id = _ref5[0],\n          fs = _ref5[1],\n          mountPoint = _ref5[2],\n          label = _ref5[3],\n          readOnly = _ref5[4],\n          removable = _ref5[5],\n          model = _ref5[6],\n          _ = _ref5[7];\n\n      if (!acc.devices[id]) {\n        acc.devices[id] = createNewDevice(id);\n      }\n      acc.devices[id].readOnly = !!parseInt(readOnly);\n      acc.devices[id].removable = !!parseInt(removable);\n      acc.devices[id].description = acc.devices[id].description || label || null;\n      return acc;\n    };\n  };\n};\n\nvar parselsblkVolumeData = exports.parselsblkVolumeData = function parselsblkVolumeData(createNewVolume) {\n  return function (acc) {\n    return function (_ref6) {\n      var _ref7 = (0, _slicedToArray3.default)(_ref6, 8),\n          id = _ref7[0],\n          fs = _ref7[1],\n          mountPoint = _ref7[2],\n          label = _ref7[3],\n          readOnly = _ref7[4],\n          removable = _ref7[5],\n          model = _ref7[6],\n          _ = _ref7[7];\n\n      if (!acc.volumes[id]) {\n        acc.volumes[id] = createNewVolume(id);\n      }\n      acc.volumes[id].fs = fs || null;\n      acc.volumes[id].mounted = !!mountPoint;\n      acc.volumes[id].mountPoint = mountPoint || null;\n      acc.volumes[id].readOnly = !!parseInt(readOnly);\n      acc.volumes[id].removable = !!parseInt(removable);\n      acc.volumes[id].description = acc.volumes[id].description || label || null;\n      return acc;\n    };\n  };\n};\n\nvar parselsblk = exports.parselsblk = function parselsblk(parselsblkDeviceData, parselsblkVolumeData) {\n  return function (lsblk) {\n    return function (acc) {\n      var lines = lsblk.split('\\n') // Split by line\n      .filter(function (s) {\n        return s.trim();\n      }); // Remove empty lines\n\n      lines.forEach(function (line) {\n        var fields = line.match(/([A-Z]+=\"[^\"]*\")+/g);\n        var values = fields.map(function (field) {\n          return field.replace(/\"/g, '').split('=')[1];\n        });\n\n        if (values[values.length - 1] === 'disk') {\n          return parselsblkDeviceData(acc)(values);\n        }\n        return parselsblkVolumeData(acc)(values);\n      });\n\n      return acc;\n    };\n  };\n};\n\nvar parsefdisklDeviceData = exports.parsefdisklDeviceData = function parsefdisklDeviceData(getNodeId, createNewDevice) {\n  return function (acc) {\n    return function (_ref8) {\n      var _ref9 = (0, _toArray3.default)(_ref8),\n          head = _ref9[0],\n          tail = _ref9.slice(1);\n\n      var matches = head.match(/Disk\\s(.*):\\s.*,\\s(\\d+)\\sbytes,\\s(\\d+) sectors/);\n      if (matches == null) {\n        throw new Error('parsefdisklDeviceData: error on parsing (head = ' + head + ')');\n      }\n\n      var _matches$slice = matches.slice(1),\n          _matches$slice2 = (0, _slicedToArray3.default)(_matches$slice, 3),\n          node = _matches$slice2[0],\n          size = _matches$slice2[1],\n          blocks = _matches$slice2[2];\n\n      var id = getNodeId(node);\n      if (!acc.devices[id]) {\n        acc.devices[id] = createNewDevice(id, node);\n      }\n      acc.devices[id].blocks = parseInt(blocks);\n      acc.devices[id].size = parseInt(size);\n      tail.forEach(function (line) {\n        if (line.match(/Sector.*:\\s\\d+\\sbytes/)) {\n          var _line$match$slice = line.match(/(\\d+)\\s.*\\s(\\d+)\\s/).slice(1),\n              _line$match$slice2 = (0, _slicedToArray3.default)(_line$match$slice, 2),\n              logical = _line$match$slice2[0],\n              physical = _line$match$slice2[1];\n\n          acc.devices[id].blockSize = parseInt(physical);\n          acc.devices[id].volumeBlockSize = parseInt(logical);\n        }\n      });\n      return acc;\n    };\n  };\n};\n\nvar parsefdisklVolumeData = exports.parsefdisklVolumeData = function parsefdisklVolumeData(getNodeId, createNewVolume) {\n  return function (acc) {\n    return function (lines) {\n      return lines.reduce(function (acc, line) {\n        var matches = line.match(/([\\w\\\\/]+)\\s+.*\\s(\\d+)\\s+[\\w.]+\\s(.*)/);\n        if (matches == null) {\n          throw new Error('parsefdisklVolumeData: error on parsing (line = ' + line + ')');\n        }\n\n        var _matches$slice3 = matches.slice(1),\n            _matches$slice4 = (0, _slicedToArray3.default)(_matches$slice3, 3),\n            node = _matches$slice4[0],\n            sectors = _matches$slice4[1],\n            description = _matches$slice4[2];\n\n        var id = getNodeId(node);\n        if (!acc.volumes[id]) {\n          acc.volumes[id] = createNewVolume(id, node);\n        }\n        acc.volumes[id].blocks = parseInt(sectors);\n        acc.volumes[id].description = description;\n        return acc;\n      }, acc);\n    };\n  };\n};\n\nvar parsefdiskl = exports.parsefdiskl = function parsefdiskl(parsefdisklDeviceData, parsefdisklVolumeData) {\n  return function (fdiskl) {\n    return function (acc) {\n      var processblock = function processblock(block) {\n        if (block[0].startsWith('Disk')) {\n          return parsefdisklDeviceData(acc)(block);\n        } else if (block[0].startsWith('Device')) {\n          return parsefdisklVolumeData(acc)(block.slice(1));\n        }\n      };\n      var lines = fdiskl.split('\\n');\n      var block = [];\n      var i = 0;\n      while (i < lines.length) {\n        var item = lines[i];\n        if (item === '' && block.length > 0) {\n          // process previous block\n          processblock(block);\n          // start new block\n          block = [];\n        } else if (item !== '') {\n          block.push(item);\n        }\n        i++;\n      };\n      return acc;\n    };\n  };\n};\n\n// split by space, except if space is preceeded by \\ (paths with spaces)\n// This is used instead of a negative lookbehind (`(?<!\\\\)\\s+`)\nvar splitdfTLine = exports.splitdfTLine = function splitdfTLine(line) {\n  return line.split(/\\s+/).filter(function (s) {\n    return s.trim();\n  }).reduce(function (a, field) {\n    if ((0, _utilities.lasti)(a) && (0, _utilities.lasti)((0, _utilities.lasti)(a)) === '\\\\') {\n      a[a.length - 1] += ' ' + field;\n    } else {\n      a.push(field);\n    }\n    return a;\n  }, []);\n};\n\nvar parsedfT = exports.parsedfT = function parsedfT(getNodeId, createNewVolume, splitdfTLine) {\n  return function (dft) {\n    return function (acc) {\n      var lines = dft.split('\\n').filter(function (s) {\n        return s.trim() && !(0, _utilities.hasSubstr)(s, 'tmpfs');\n      }) // remove empty lines & tmp file systems\n      .slice(1); // remove table header\n\n      return lines.reduce(function (acc, line) {\n        var _splitdfTLine = splitdfTLine(line),\n            _splitdfTLine2 = (0, _slicedToArray3.default)(_splitdfTLine, 7),\n            node = _splitdfTLine2[0],\n            filesystem = _splitdfTLine2[1],\n            size = _splitdfTLine2[2],\n            used = _splitdfTLine2[3],\n            available = _splitdfTLine2[4],\n            mountPoint = _splitdfTLine2[6];\n\n        var id = getNodeId(node);\n        acc.volumes[id] = createNewVolume(id, node);\n        acc.volumes[id].mounted = true;\n        acc.volumes[id].mountPoint = mountPoint;\n        acc.volumes[id].fs = filesystem === 'vfat' ? 'FAT32' : filesystem;\n        acc.volumes[id].space.total = parseInt(size) * 1024;\n        acc.volumes[id].space.available = parseInt(available) * 1024;\n        acc.volumes[id].space.used = parseInt(used) * 1024;\n        return acc;\n      }, acc);\n    };\n  };\n};\n\nvar parseLinux = exports.parseLinux = function parseLinux(mergeVolumesAndDevicesLinux, parselsblk, parsefdiskl, parsedfT) {\n  return function (userFilter) {\n    return function (output) {\n      var parts = output.split('\\n**********\\n\\n');\n\n      var _parts = (0, _slicedToArray3.default)(parts, 3),\n          dft = _parts[0],\n          fdiskl = _parts[1],\n          lsblk = _parts[2];\n\n      var accumulator = compose(mergeVolumesAndDevicesLinux, parselsblk(lsblk), parsefdiskl(fdiskl), parsedfT(dft))({ devices: {}, volumes: {} });\n\n      return {\n        devices: filter(userFilter, accumulator.devices)\n      };\n    };\n  };\n};"]},"metadata":{},"sourceType":"script"}