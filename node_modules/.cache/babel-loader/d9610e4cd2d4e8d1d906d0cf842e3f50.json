{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseWindows = exports.parseWindowsProps = exports.COMMAND = undefined;\n\nvar _functional = require('../functional');\n\nvar _functional2 = _interopRequireDefault(_functional);\n\nvar _utilities = require('../utilities');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar filter = _functional2.default.filter;\nvar COMMAND = exports.COMMAND = 'wmic logicaldisk get ' + 'Caption,Description,DeviceID,DriveType,FileSystem,FreeSpace,Name,Size,VolumeName ' + '/format:csv';\n\nvar parseWindowsProps = exports.parseWindowsProps = function parseWindowsProps(acc, _ref) {\n  var Caption = _ref.Caption,\n      Description = _ref.Description,\n      DeviceID = _ref.DeviceID,\n      DriveType = _ref.DriveType,\n      FileSystem = _ref.FileSystem,\n      FreeSpace = _ref.FreeSpace,\n      Name = _ref.Name,\n      Size = _ref.Size,\n      VolumeName = _ref.VolumeName;\n  acc.devices[Name] = acc.devices[Name] ? acc.devices[Name] : (0, _utilities.emptyDevice)();\n  acc.devices[Name].id = DeviceID;\n  acc.devices[Name].whole = true;\n  acc.devices[Name].parent = DeviceID;\n  acc.devices[Name].node = Caption;\n  acc.devices[Name].name = Name;\n  acc.devices[Name].size = parseInt(Size) || 0;\n  acc.devices[Name].description = Description;\n  acc.devices[Name].removable = DriveType === '2';\n  var volume = (0, _utilities.emptyVolume)();\n  volume.id = DeviceID;\n  volume.node = DeviceID;\n  volume.name = VolumeName;\n  volume.parent = DeviceID;\n  volume.mounted = true;\n  volume.mountPoint = Name;\n  volume.fs = FileSystem;\n  volume.space.total = parseInt(Size) || 0;\n  volume.space.available = parseInt(FreeSpace) || 0;\n  volume.space.used = volume.space.total - volume.space.available;\n  acc.devices[Name].volumes = [volume];\n  return acc;\n};\n\nvar parseWindows = exports.parseWindows = function parseWindows(parseWindowsProps) {\n  return function (userFilter) {\n    return function (data) {\n      // fix double \\r\\r coming from wmic\n      data = data.replace(/\\r\\r/gi, '\\r');\n      var lines = data.split('\\r\\n').filter(function (s) {\n        return s.trim();\n      });\n      var columns = lines[0].split(',');\n      var result = [];\n\n      for (var i = 1; i < lines.length; i++) {\n        var values = lines[i].split(',');\n        var obj = {};\n        values.map(function (val, j) {\n          obj[columns[j]] = val;\n        });\n        result.push(obj);\n      }\n\n      var _result$reduce = result.reduce(function (acc, v) {\n        return parseWindowsProps(acc, v);\n      }, {\n        devices: {}\n      }),\n          devices = _result$reduce.devices;\n\n      return {\n        devices: filter(userFilter, devices) // apply user filter\n\n      };\n    };\n  };\n};","map":{"version":3,"sources":["C:/we-transfer-clone/app/node_modules/fs-filesystem/esm/windows/windows.js"],"names":["Object","defineProperty","exports","value","parseWindows","parseWindowsProps","COMMAND","undefined","_functional","require","_functional2","_interopRequireDefault","_utilities","obj","__esModule","default","filter","acc","_ref","Caption","Description","DeviceID","DriveType","FileSystem","FreeSpace","Name","Size","VolumeName","devices","emptyDevice","id","whole","parent","node","name","size","parseInt","description","removable","volume","emptyVolume","mounted","mountPoint","fs","space","total","available","used","volumes","userFilter","data","replace","lines","split","s","trim","columns","result","i","length","values","map","val","j","push","_result$reduce","reduce","v"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseWindows = exports.parseWindowsProps = exports.COMMAND = undefined;\n\nvar _functional = require('../functional');\n\nvar _functional2 = _interopRequireDefault(_functional);\n\nvar _utilities = require('../utilities');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar filter = _functional2.default.filter;\nvar COMMAND = exports.COMMAND = 'wmic logicaldisk get ' + 'Caption,Description,DeviceID,DriveType,FileSystem,FreeSpace,Name,Size,VolumeName ' + '/format:csv';\n\nvar parseWindowsProps = exports.parseWindowsProps = function parseWindowsProps(acc, _ref) {\n  var Caption = _ref.Caption,\n      Description = _ref.Description,\n      DeviceID = _ref.DeviceID,\n      DriveType = _ref.DriveType,\n      FileSystem = _ref.FileSystem,\n      FreeSpace = _ref.FreeSpace,\n      Name = _ref.Name,\n      Size = _ref.Size,\n      VolumeName = _ref.VolumeName;\n\n  acc.devices[Name] = acc.devices[Name] ? acc.devices[Name] : (0, _utilities.emptyDevice)();\n  acc.devices[Name].id = DeviceID;\n  acc.devices[Name].whole = true;\n  acc.devices[Name].parent = DeviceID;\n  acc.devices[Name].node = Caption;\n  acc.devices[Name].name = Name;\n  acc.devices[Name].size = parseInt(Size) || 0;\n  acc.devices[Name].description = Description;\n  acc.devices[Name].removable = DriveType === '2';\n\n  var volume = (0, _utilities.emptyVolume)();\n  volume.id = DeviceID;\n  volume.node = DeviceID;\n  volume.name = VolumeName;\n  volume.parent = DeviceID;\n  volume.mounted = true;\n  volume.mountPoint = Name;\n  volume.fs = FileSystem;\n  volume.space.total = parseInt(Size) || 0;\n  volume.space.available = parseInt(FreeSpace) || 0;\n  volume.space.used = volume.space.total - volume.space.available;\n  acc.devices[Name].volumes = [volume];\n\n  return acc;\n};\n\nvar parseWindows = exports.parseWindows = function parseWindows(parseWindowsProps) {\n  return function (userFilter) {\n    return function (data) {\n      // fix double \\r\\r coming from wmic\n      data = data.replace(/\\r\\r/gi, '\\r');\n      var lines = data.split('\\r\\n').filter(function (s) {\n        return s.trim();\n      });\n\n      var columns = lines[0].split(',');\n      var result = [];\n      for (var i = 1; i < lines.length; i++) {\n        var values = lines[i].split(',');\n        var obj = {};\n        values.map(function (val, j) {\n          obj[columns[j]] = val;\n        });\n        result.push(obj);\n      }\n\n      var _result$reduce = result.reduce(function (acc, v) {\n        return parseWindowsProps(acc, v);\n      }, { devices: {} }),\n          devices = _result$reduce.devices;\n\n      return {\n        devices: filter(userFilter, devices) // apply user filter\n      };\n    };\n  };\n};"]},"metadata":{},"sourceType":"script"}