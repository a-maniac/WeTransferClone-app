{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseMacOS = exports.parseMacOSToProps = exports.parseNodeId = exports.addEmptyNode = exports.addEmptyVolumeToDevice = exports.addEmptyDevice = exports.getPropsTarget = exports.nodeType = exports.macOSFS = exports.getMacOSBytes = exports.COMMAND = undefined;\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _entries = require('babel-runtime/core-js/object/entries');\n\nvar _entries2 = _interopRequireDefault(_entries);\n\nvar _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');\n\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');\n\nvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);\n\nvar _functional = require('../functional');\n\nvar _functional2 = _interopRequireDefault(_functional);\n\nvar _utilities = require('../utilities');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar each = _functional2.default.each;\nvar filter = _functional2.default.R.filter;\nvar COMMAND = exports.COMMAND = 'diskutil info -all';\n\nvar getMacOSBytes = exports.getMacOSBytes = function getMacOSBytes(str) {\n  return parseInt(str.match(/\\((\\d+) Bytes\\)/)[1]);\n};\n\nvar macOSFS = exports.macOSFS = function macOSFS(fs) {\n  switch (fs) {\n    case 'ExFAT':\n      return 'ExFAT';\n\n    case 'MS-DOS':\n      return 'FAT';\n\n    case 'MS-DOS FAT12':\n      return 'FAT12';\n\n    case 'MS-DOS FAT16':\n      return 'FAT16';\n\n    case 'MS-DOS FAT32':\n    case 'fat32':\n      return 'FAT32';\n\n    case 'HFS+':\n    case 'Case-sensitive HFS+':\n    case 'hfsx':\n    case 'Case-sensitive Journaled HFS+':\n    case 'jhfsx':\n    case 'Journaled HFS+':\n    case 'jhfs+':\n      return 'HFS+';\n\n    case 'Free Space':\n    case 'free':\n    default:\n      return null;\n  }\n};\n/* lower order functions for parseMacOS */\n// Tells you whether this is a volume or a device\n\n\nvar nodeType = exports.nodeType = function nodeType(node) {\n  return node.space ? 'volume' : 'device';\n}; // Gets target device / volume for parseMacOSToProps\n\n\nvar getPropsTarget = exports.getPropsTarget = function getPropsTarget(acc, _ref) {\n  var _ref2 = (0, _slicedToArray3.default)(_ref, 2),\n      devid = _ref2[0],\n      id = _ref2[1];\n\n  return id ? acc.devices[devid].volumes[id] : acc.devices[devid];\n}; // Adds an empty device to accumulator\n\n\nvar addEmptyDevice = exports.addEmptyDevice = function addEmptyDevice(acc) {\n  return function (id) {\n    acc.devices[id] = (0, _utilities.emptyDevice)();\n  };\n}; // Adds an empty volume to its parent device\n\n\nvar addEmptyVolumeToDevice = exports.addEmptyVolumeToDevice = function addEmptyVolumeToDevice(device) {\n  return function (id) {\n    device.volumes = device.volumes ? device.volumes : {};\n    device.volumes[id] = (0, _utilities.emptyVolume)();\n  };\n}; // Adds an empty device / volume based off wether a volume id is provided\n\n\nvar addEmptyNode = exports.addEmptyNode = function addEmptyNode(addEmptyDevice, addEmptyVolumeToDevice) {\n  return function (acc, _ref3) {\n    var _ref4 = (0, _slicedToArray3.default)(_ref3, 2),\n        devid = _ref4[0],\n        id = _ref4[1];\n\n    return id ? addEmptyVolumeToDevice(acc.devices[devid])(id) : addEmptyDevice(acc)(devid);\n  };\n}; // Finds the device id as well as the volume id (where applicable) from the provided input lines\n\n\nvar parseNodeId = exports.parseNodeId = function parseNodeId(acc, lines) {\n  var id = lines.find(function (l) {\n    return l.match('Device Identifier');\n  }).match(/:\\s+(.*)/)[1];\n  var devid = (0, _keys2.default)(acc.devices).find(function (dev) {\n    return id.match('^' + dev);\n  });\n  return devid ? [devid, id] : [id, undefined];\n}; // Maps received line to a property on the node\n\n\nvar parseMacOSToProps = exports.parseMacOSToProps = function parseMacOSToProps(macOSFS, getMacOSBytes) {\n  var PROPERTY_MAP = {\n    'Device Identifier': {\n      target: 'dual',\n      key: 'id',\n      mapper: function mapper(node, value) {\n        node.id = value;\n      }\n    },\n    'Device Node': {\n      target: 'dual',\n      key: 'node',\n      mapper: function mapper(node, value) {\n        node.node = value;\n      }\n    },\n    'Whole': {\n      target: 'dual',\n      key: 'whole',\n      mapper: function mapper(node, value) {\n        node.whole = (0, _utilities.getYesNo)(value);\n      }\n    },\n    'Part of Whole': {\n      target: 'dual',\n      key: 'parent',\n      mapper: function mapper(node, value) {\n        node.parent = value;\n      }\n    },\n    'Device / Media Name': {\n      target: 'dual',\n      key: 'description',\n      mapper: function mapper(node, value) {\n        node.description = value;\n      }\n    },\n    'Volume Name': {\n      target: 'dual',\n      key: 'name',\n      mapper: function mapper(node, value) {\n        node.name = (0, _utilities.hasSubstr)(value, 'Not applicable') ? null : value;\n      }\n    },\n    'Mounted': {\n      target: 'dual',\n      key: 'mounted',\n      mapper: function mapper(node, value) {\n        node.mounted = !(0, _utilities.hasSubstr)(value, 'Not applicable');\n      }\n    },\n    'Mount Point': {\n      target: 'dual',\n      key: 'mountPoint',\n      mapper: function mapper(node, value) {\n        node.mountPoint = (0, _utilities.hasSubstr)(value, 'Not applicable') ? null : value;\n      }\n    },\n    'File System Personality': {\n      target: 'volume',\n      key: 'fs',\n      mapper: function mapper(node, value) {\n        node.fs = macOSFS(value);\n      }\n    },\n    'Partition Type': {\n      target: 'volume',\n      key: 'partitionType',\n      mapper: function mapper(node, value) {\n        node.partitionType = value;\n      }\n    },\n    'Protocol': {\n      target: 'device',\n      key: 'protocol',\n      mapper: function mapper(node, value) {\n        node.protocol = value;\n      }\n    },\n    'Disk Size': {\n      target: 'device',\n      key: 'size',\n      mapper: function mapper(node, value) {\n        node.size = getMacOSBytes(value);\n      }\n    },\n    'Total Size': {\n      target: 'device',\n      key: 'size',\n      mapper: function mapper(node, value) {\n        node.size = node.size || getMacOSBytes(value);\n      }\n    },\n    'Device Block Size': {\n      target: 'device',\n      key: 'blockSize',\n      mapper: function mapper(node, value) {\n        node.blockSize = parseInt(value.match(/\\d+/)[0]);\n      }\n    },\n    'Volume Total Space': {\n      target: 'volume',\n      key: 'space.total',\n      mapper: function mapper(node, value) {\n        node.space.total = getMacOSBytes(value);\n      }\n    },\n    'Volume Used Space': {\n      target: 'volume',\n      key: 'space.used',\n      mapper: function mapper(node, value) {\n        node.space.used = getMacOSBytes(value);\n      }\n    },\n    'Volume Available Space': {\n      target: 'volume',\n      key: 'space.available',\n      mapper: function mapper(node, value) {\n        node.space.available = getMacOSBytes(value);\n\n        if (node.space.total !== null && node.space.used === null) {\n          node.space.used = node.space.total - node.space.available;\n        }\n      }\n    },\n    'Volume Free Space': {\n      target: 'volume',\n      key: 'space.available',\n      mapper: function mapper(node, value) {\n        node.space.available = getMacOSBytes(value);\n\n        if (node.space.total !== null && node.space.used === null) {\n          node.space.used = node.space.total - node.space.available;\n        }\n      }\n    },\n    'Allocation Block Size': {\n      target: 'volume',\n      key: 'blockSize',\n      mapper: function mapper(node, value) {\n        node.blockSize = parseInt(value.match(/\\d+/)[0]);\n      }\n    },\n    'Read-Only Media': {\n      target: 'device',\n      key: 'readOnly',\n      mapper: function mapper(node, value) {\n        node.readOnly = (0, _utilities.getYesNo)(value);\n      }\n    },\n    'Read-Only Volume': {\n      target: 'dual',\n      key: 'readOnly',\n      mapper: function mapper(node, value) {\n        node.readOnly = (0, _utilities.hasSubstr)(value, 'Not applicable (not mounted)') ? null : (0, _utilities.getYesNo)(value);\n      }\n    },\n    'Removable Media': {\n      target: 'device',\n      key: 'removable',\n      mapper: function mapper(node, value) {\n        node.removable = value === 'Fixed';\n      }\n    }\n  };\n  return function (node, key, value) {\n    // Property ought to be mapped on current node\n    if (PROPERTY_MAP[key] && PROPERTY_MAP[key].target === nodeType(node)) {\n      PROPERTY_MAP[key].mapper(node, value);\n      return node;\n    } // Property ought to be mapped on both device and volume\n\n\n    if (PROPERTY_MAP[key] && PROPERTY_MAP[key].target === 'dual') {\n      PROPERTY_MAP[key].mapper(node, value);\n\n      if (node.volumes && node.volumes[node.id]) {\n        PROPERTY_MAP[key].mapper(node.volumes[node.id], value);\n      }\n\n      return node;\n    } // Property ought to be mapped on volume but current node is a device => dual\n\n\n    if (PROPERTY_MAP[key] && PROPERTY_MAP[key].target === 'volume' && nodeType(node) === 'device') {\n      if (!(node.volumes && node.volumes[node.id])) {\n        addEmptyVolumeToDevice(node)(node.id);\n        each(function (_ref5) {\n          var target = _ref5.target,\n              key = _ref5.key;\n          if (target === 'dual') node.volumes[node.id][key] = node[key];\n        }, PROPERTY_MAP);\n      }\n\n      PROPERTY_MAP[key].mapper(node.volumes[node.id], value);\n      return node;\n    } // Property ought to be mapped on device but current node is a volume\n    // or property is not in PROPERTY_MAP\n\n\n    return node;\n  };\n}; // Parses output of COMMAND to an object\n\n\nvar parseMacOS = exports.parseMacOS = function parseMacOS(getPropsTarget, addEmptyNode, parseNodeId, parseMacOSToProps) {\n  return function (userFilter) {\n    return function (output) {\n      var entries = output.split(/\\*{10}/) // Split per entry\n      .filter(function (s) {\n        return s.trim();\n      }); // Remove empty blocks\n      // reduce input entries to device / volume objects and return accumulator\n\n      var accumulator = entries.reduce(function (acc, entry) {\n        var lines = entry.split('\\n') // Split by line\n        .map(function (s) {\n          return s.trim();\n        }) // Trim whitespace\n        .filter(function (s) {\n          return s;\n        }); // Remove empty lines\n\n        var identifiers = parseNodeId(acc, lines);\n        addEmptyNode(acc, identifiers);\n        lines.reduce(function (target, line) {\n          return parseMacOSToProps.apply(undefined, [target].concat((0, _toConsumableArray3.default)(line.split(/:\\s+/))));\n        }, getPropsTarget(acc, identifiers));\n        return acc;\n      }, {\n        devices: {}\n      });\n      accumulator.devices = (0, _entries2.default)(accumulator.devices).map(function (_ref6) {\n        var _ref7 = (0, _slicedToArray3.default)(_ref6, 2),\n            k = _ref7[0],\n            dev = _ref7[1];\n\n        return [k, (0, _extends3.default)({}, dev, {\n          volumes: dev.volumes ? (0, _keys2.default)(dev.volumes).map(function (k) {\n            return dev.volumes[k];\n          }) : []\n        })];\n      }).reduce(function (acc, _ref8) {\n        var _ref9 = (0, _slicedToArray3.default)(_ref8, 2),\n            k = _ref9[0],\n            dev = _ref9[1];\n\n        acc[k] = dev;\n        return acc;\n      }, {}); // Filter devices according to userFilter\n\n      return {\n        devices: filter(userFilter, accumulator.devices)\n      };\n    };\n  };\n};","map":{"version":3,"sources":["C:/we-transfer-clone/app/node_modules/fs-filesystem/esm/macOS/macOS.js"],"names":["Object","defineProperty","exports","value","parseMacOS","parseMacOSToProps","parseNodeId","addEmptyNode","addEmptyVolumeToDevice","addEmptyDevice","getPropsTarget","nodeType","macOSFS","getMacOSBytes","COMMAND","undefined","_extends2","require","_extends3","_interopRequireDefault","_entries","_entries2","_toConsumableArray2","_toConsumableArray3","_keys","_keys2","_slicedToArray2","_slicedToArray3","_functional","_functional2","_utilities","obj","__esModule","default","each","filter","R","str","parseInt","match","fs","node","space","acc","_ref","_ref2","devid","id","devices","volumes","emptyDevice","device","emptyVolume","_ref3","_ref4","lines","find","l","dev","PROPERTY_MAP","target","key","mapper","whole","getYesNo","parent","description","name","hasSubstr","mounted","mountPoint","partitionType","protocol","size","blockSize","total","used","available","readOnly","removable","_ref5","userFilter","output","entries","split","s","trim","accumulator","reduce","entry","map","identifiers","line","apply","concat","_ref6","_ref7","k","_ref8","_ref9"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseMacOS = exports.parseMacOSToProps = exports.parseNodeId = exports.addEmptyNode = exports.addEmptyVolumeToDevice = exports.addEmptyDevice = exports.getPropsTarget = exports.nodeType = exports.macOSFS = exports.getMacOSBytes = exports.COMMAND = undefined;\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _entries = require('babel-runtime/core-js/object/entries');\n\nvar _entries2 = _interopRequireDefault(_entries);\n\nvar _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');\n\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');\n\nvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);\n\nvar _functional = require('../functional');\n\nvar _functional2 = _interopRequireDefault(_functional);\n\nvar _utilities = require('../utilities');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar each = _functional2.default.each;\nvar filter = _functional2.default.R.filter;\nvar COMMAND = exports.COMMAND = 'diskutil info -all';\n\nvar getMacOSBytes = exports.getMacOSBytes = function getMacOSBytes(str) {\n  return parseInt(str.match(/\\((\\d+) Bytes\\)/)[1]);\n};\n\nvar macOSFS = exports.macOSFS = function macOSFS(fs) {\n  switch (fs) {\n    case 'ExFAT':\n      return 'ExFAT';\n    case 'MS-DOS':\n      return 'FAT';\n    case 'MS-DOS FAT12':\n      return 'FAT12';\n    case 'MS-DOS FAT16':\n      return 'FAT16';\n    case 'MS-DOS FAT32':\n    case 'fat32':\n      return 'FAT32';\n    case 'HFS+':\n    case 'Case-sensitive HFS+':\n    case 'hfsx':\n    case 'Case-sensitive Journaled HFS+':\n    case 'jhfsx':\n    case 'Journaled HFS+':\n    case 'jhfs+':\n      return 'HFS+';\n    case 'Free Space':\n    case 'free':\n    default:\n      return null;\n  }\n};\n\n/* lower order functions for parseMacOS */\n\n// Tells you whether this is a volume or a device\nvar nodeType = exports.nodeType = function nodeType(node) {\n  return node.space ? 'volume' : 'device';\n};\n\n// Gets target device / volume for parseMacOSToProps\nvar getPropsTarget = exports.getPropsTarget = function getPropsTarget(acc, _ref) {\n  var _ref2 = (0, _slicedToArray3.default)(_ref, 2),\n      devid = _ref2[0],\n      id = _ref2[1];\n\n  return id ? acc.devices[devid].volumes[id] : acc.devices[devid];\n};\n\n// Adds an empty device to accumulator\nvar addEmptyDevice = exports.addEmptyDevice = function addEmptyDevice(acc) {\n  return function (id) {\n    acc.devices[id] = (0, _utilities.emptyDevice)();\n  };\n};\n\n// Adds an empty volume to its parent device\nvar addEmptyVolumeToDevice = exports.addEmptyVolumeToDevice = function addEmptyVolumeToDevice(device) {\n  return function (id) {\n    device.volumes = device.volumes ? device.volumes : {};\n    device.volumes[id] = (0, _utilities.emptyVolume)();\n  };\n};\n\n// Adds an empty device / volume based off wether a volume id is provided\nvar addEmptyNode = exports.addEmptyNode = function addEmptyNode(addEmptyDevice, addEmptyVolumeToDevice) {\n  return function (acc, _ref3) {\n    var _ref4 = (0, _slicedToArray3.default)(_ref3, 2),\n        devid = _ref4[0],\n        id = _ref4[1];\n\n    return id ? addEmptyVolumeToDevice(acc.devices[devid])(id) : addEmptyDevice(acc)(devid);\n  };\n};\n\n// Finds the device id as well as the volume id (where applicable) from the provided input lines\nvar parseNodeId = exports.parseNodeId = function parseNodeId(acc, lines) {\n  var id = lines.find(function (l) {\n    return l.match('Device Identifier');\n  }).match(/:\\s+(.*)/)[1];\n  var devid = (0, _keys2.default)(acc.devices).find(function (dev) {\n    return id.match('^' + dev);\n  });\n\n  return devid ? [devid, id] : [id, undefined];\n};\n\n// Maps received line to a property on the node\nvar parseMacOSToProps = exports.parseMacOSToProps = function parseMacOSToProps(macOSFS, getMacOSBytes) {\n  var PROPERTY_MAP = {\n    'Device Identifier': {\n      target: 'dual',\n      key: 'id',\n      mapper: function mapper(node, value) {\n        node.id = value;\n      }\n    },\n    'Device Node': {\n      target: 'dual',\n      key: 'node',\n      mapper: function mapper(node, value) {\n        node.node = value;\n      }\n    },\n    'Whole': {\n      target: 'dual',\n      key: 'whole',\n      mapper: function mapper(node, value) {\n        node.whole = (0, _utilities.getYesNo)(value);\n      }\n    },\n    'Part of Whole': {\n      target: 'dual',\n      key: 'parent',\n      mapper: function mapper(node, value) {\n        node.parent = value;\n      }\n    },\n    'Device / Media Name': {\n      target: 'dual',\n      key: 'description',\n      mapper: function mapper(node, value) {\n        node.description = value;\n      }\n    },\n    'Volume Name': {\n      target: 'dual',\n      key: 'name',\n      mapper: function mapper(node, value) {\n        node.name = (0, _utilities.hasSubstr)(value, 'Not applicable') ? null : value;\n      }\n    },\n    'Mounted': {\n      target: 'dual',\n      key: 'mounted',\n      mapper: function mapper(node, value) {\n        node.mounted = !(0, _utilities.hasSubstr)(value, 'Not applicable');\n      }\n    },\n    'Mount Point': {\n      target: 'dual',\n      key: 'mountPoint',\n      mapper: function mapper(node, value) {\n        node.mountPoint = (0, _utilities.hasSubstr)(value, 'Not applicable') ? null : value;\n      }\n    },\n    'File System Personality': {\n      target: 'volume',\n      key: 'fs',\n      mapper: function mapper(node, value) {\n        node.fs = macOSFS(value);\n      }\n    },\n    'Partition Type': {\n      target: 'volume',\n      key: 'partitionType',\n      mapper: function mapper(node, value) {\n        node.partitionType = value;\n      }\n    },\n    'Protocol': {\n      target: 'device',\n      key: 'protocol',\n      mapper: function mapper(node, value) {\n        node.protocol = value;\n      }\n    },\n    'Disk Size': {\n      target: 'device',\n      key: 'size',\n      mapper: function mapper(node, value) {\n        node.size = getMacOSBytes(value);\n      }\n    },\n    'Total Size': {\n      target: 'device',\n      key: 'size',\n      mapper: function mapper(node, value) {\n        node.size = node.size || getMacOSBytes(value);\n      }\n    },\n    'Device Block Size': {\n      target: 'device',\n      key: 'blockSize',\n      mapper: function mapper(node, value) {\n        node.blockSize = parseInt(value.match(/\\d+/)[0]);\n      }\n    },\n    'Volume Total Space': {\n      target: 'volume',\n      key: 'space.total',\n      mapper: function mapper(node, value) {\n        node.space.total = getMacOSBytes(value);\n      }\n    },\n    'Volume Used Space': {\n      target: 'volume',\n      key: 'space.used',\n      mapper: function mapper(node, value) {\n        node.space.used = getMacOSBytes(value);\n      }\n    },\n    'Volume Available Space': {\n      target: 'volume',\n      key: 'space.available',\n      mapper: function mapper(node, value) {\n        node.space.available = getMacOSBytes(value);\n        if (node.space.total !== null && node.space.used === null) {\n          node.space.used = node.space.total - node.space.available;\n        }\n      }\n    },\n    'Volume Free Space': {\n      target: 'volume',\n      key: 'space.available',\n      mapper: function mapper(node, value) {\n        node.space.available = getMacOSBytes(value);\n        if (node.space.total !== null && node.space.used === null) {\n          node.space.used = node.space.total - node.space.available;\n        }\n      }\n    },\n    'Allocation Block Size': {\n      target: 'volume',\n      key: 'blockSize',\n      mapper: function mapper(node, value) {\n        node.blockSize = parseInt(value.match(/\\d+/)[0]);\n      }\n    },\n    'Read-Only Media': {\n      target: 'device',\n      key: 'readOnly',\n      mapper: function mapper(node, value) {\n        node.readOnly = (0, _utilities.getYesNo)(value);\n      }\n    },\n    'Read-Only Volume': {\n      target: 'dual',\n      key: 'readOnly',\n      mapper: function mapper(node, value) {\n        node.readOnly = (0, _utilities.hasSubstr)(value, 'Not applicable (not mounted)') ? null : (0, _utilities.getYesNo)(value);\n      }\n    },\n    'Removable Media': {\n      target: 'device',\n      key: 'removable',\n      mapper: function mapper(node, value) {\n        node.removable = value === 'Fixed';\n      }\n    }\n  };\n\n  return function (node, key, value) {\n    // Property ought to be mapped on current node\n    if (PROPERTY_MAP[key] && PROPERTY_MAP[key].target === nodeType(node)) {\n      PROPERTY_MAP[key].mapper(node, value);\n      return node;\n    }\n\n    // Property ought to be mapped on both device and volume\n    if (PROPERTY_MAP[key] && PROPERTY_MAP[key].target === 'dual') {\n      PROPERTY_MAP[key].mapper(node, value);\n      if (node.volumes && node.volumes[node.id]) {\n        PROPERTY_MAP[key].mapper(node.volumes[node.id], value);\n      }\n      return node;\n    }\n\n    // Property ought to be mapped on volume but current node is a device => dual\n    if (PROPERTY_MAP[key] && PROPERTY_MAP[key].target === 'volume' && nodeType(node) === 'device') {\n      if (!(node.volumes && node.volumes[node.id])) {\n        addEmptyVolumeToDevice(node)(node.id);\n        each(function (_ref5) {\n          var target = _ref5.target,\n              key = _ref5.key;\n          if (target === 'dual') node.volumes[node.id][key] = node[key];\n        }, PROPERTY_MAP);\n      }\n      PROPERTY_MAP[key].mapper(node.volumes[node.id], value);\n      return node;\n    }\n\n    // Property ought to be mapped on device but current node is a volume\n    // or property is not in PROPERTY_MAP\n    return node;\n  };\n};\n\n// Parses output of COMMAND to an object\nvar parseMacOS = exports.parseMacOS = function parseMacOS(getPropsTarget, addEmptyNode, parseNodeId, parseMacOSToProps) {\n  return function (userFilter) {\n    return function (output) {\n      var entries = output.split(/\\*{10}/) // Split per entry\n      .filter(function (s) {\n        return s.trim();\n      }); // Remove empty blocks\n\n      // reduce input entries to device / volume objects and return accumulator\n      var accumulator = entries.reduce(function (acc, entry) {\n        var lines = entry.split('\\n') // Split by line\n        .map(function (s) {\n          return s.trim();\n        }) // Trim whitespace\n        .filter(function (s) {\n          return s;\n        }); // Remove empty lines\n\n        var identifiers = parseNodeId(acc, lines);\n        addEmptyNode(acc, identifiers);\n\n        lines.reduce(function (target, line) {\n          return parseMacOSToProps.apply(undefined, [target].concat((0, _toConsumableArray3.default)(line.split(/:\\s+/))));\n        }, getPropsTarget(acc, identifiers));\n\n        return acc;\n      }, { devices: {} });\n\n      accumulator.devices = (0, _entries2.default)(accumulator.devices).map(function (_ref6) {\n        var _ref7 = (0, _slicedToArray3.default)(_ref6, 2),\n            k = _ref7[0],\n            dev = _ref7[1];\n\n        return [k, (0, _extends3.default)({}, dev, {\n          volumes: dev.volumes ? (0, _keys2.default)(dev.volumes).map(function (k) {\n            return dev.volumes[k];\n          }) : []\n        })];\n      }).reduce(function (acc, _ref8) {\n        var _ref9 = (0, _slicedToArray3.default)(_ref8, 2),\n            k = _ref9[0],\n            dev = _ref9[1];\n\n        acc[k] = dev;\n        return acc;\n      }, {});\n\n      // Filter devices according to userFilter\n      return {\n        devices: filter(userFilter, accumulator.devices)\n      };\n    };\n  };\n};"]},"metadata":{},"sourceType":"script"}